
$hash_Lattice_Minsize={}
class Lattice_Minsize
  attr_accessor :size
  def self.[](a)
    return $hash_Lattice_Minsize[a] if $hash_Lattice_Minsize[a]
    l=self.new
    l.size=a
    $hash_Lattice_Minsize[a]=l
  end
  alias_method :==,:equal?
  def |(a);       Lattice_Minsize[ [size,a.size].min ]; end
  def seqjoin(a); Lattice_Minsize[ size+a.size       ]; end
  def inspect; "Lattice_Minsize[#{size}]";end
end

$hash_Lattice_Maxsize={}
class Lattice_Maxsize
  attr_accessor :size
  def self.[](a)
		a=1.0/0.0 if a>16
    return $hash_Lattice_Maxsize[a] if $hash_Lattice_Maxsize[a]
    l=self.new
    l.size=a
    $hash_Lattice_Maxsize[a]=l
  end
  alias_method :==,:equal?
  def |(a);       Lattice_Maxsize[ [size,a.size].max ]; end
  def seqjoin(a); Lattice_Maxsize[ size+a.size       ]; end
  def inspect;   "Lattice_Maxsize[#{size}            ]";end
end


$hash_Lattices={}
class FirstLattice
  attr_accessor :ary
	def self.[](clas,*ary)
		$hash_Lattices[clas]||={}
		return $hash_Lattices[clas][ary] if $hash_Lattices[clas][ary]
		s=clas.new
		s.ary=ary
		$hash_Lattices[clas][ary]=s
	end  

  def |(a)
    self.class[*(ary|a.ary)]
  end
  def seqjoin(a)
    self|a
  end

  def ~
    raise "Not implemented"
  end
  def &(a) #De Morgan's law
     ~(~self | ~a)
  end
  def -(a)
    self&(~a)
  end

  def cases()
    ary.map{|c| "case #{c}:;"}*""
  end
  def inspect
    self.class.to_s+ary.inspect
  end
end

class Lattice_Char < FirstLattice
  def self.[](*ary)
    nary=[]
    if ary.size>0
      first,last=*ary.sort[0]
      (ary.sort+[[257,257]]).each{|beg,en|
        if beg<=last+1
          last=[last,en].max
        else
          nary<<[first,last]
          first,last=beg,en
        end
      }
    end
		FirstLattice[Lattice_Char,*nary]
  end
  alias_method :==,:equal?
  def cchar(c)
    return "'#{c.chr}'" if c.chr.inspect.size==3 && c.chr.inspect!='"\'"' && c.ord < 128
    "UC(#{c.ord})"
  end
  def cases()
    ary.map{|c| "case #{cchar(c[0])} ... #{cchar(c[1])}:;"}*""
  end
  def ~
    first=0
    nary=[]
    (ary+[[256,256]]).each{|beg,en|
      nary<<[first,beg-1] if first<=beg-1
      first=en+1
    }
    Lattice_Char[*nary]
  end
end

class Lattice_Clas < FirstLattice
  def self.[](*ary)
    ary=ary.uniq.sort_by{|a| a.inspect}.map{|a| eval(a.to_s)}
		FirstLattice[Lattice_Clas,*ary]
  end
  alias_method :==,:equal?
  
  #TODO operations other than |
  #TODO modules
  def &(a)
    n=[]
    ary.each{|u| a.ary.each{|v|
      n<<u if u<=v
      n<<v if v<=u
    }}
    Lattice_Clas[*n.uniq]
  end
end

$hash_Lattice_Cant_Fail={}
class Lattice_Cant_Fail < FirstLattice
	def value;ary[0];end
  def self.[](val)
		FirstLattice[Lattice_Cant_Fail,val]
  end
  def |(a)      ;    Lattice_Cant_Fail[value & a.value];  end
  def seqjoin(a);    Lattice_Cant_Fail[value & a.value];  end
end



class First_Dataflow < Amethyst
  def initialize
    @depend=Oriented_Graph.new
    @vals=Hash.new(lattice.bottom)
    @visited={}
  end

  def analyze(e)
    @active={}
    @activea=[e]
    while el=@activea.pop
      @active.delete(el)
      val=getvalue(el)
      if val!=@vals[el]
        @vals[el]=val
        @depend.edges[el].each{|d| addactive(d)}
      end

    end
    @vals[e]
  end 
  def depends(e)
    @depend.add(e,@vis) unless @depend.edges[e].include?(@vis)
    if !@visited[e]
      @visited[e]=true
      addactive(e)
    end
  end
  def addactive(e)
    if !@active[e]
      @active[e]=true
      @activea<<e
    end
  end

end

class Switch_Clas_Dataflow < First_Dataflow;  def lattice;    Lattice_Clas;        end; end
class Switch_Char_Dataflow < First_Dataflow;  def lattice;    Lattice_Char;        end; end
class Minsize_Dataflow < First_Dataflow      ;  def lattice;    Lattice_Minsize;       end; end
class Maxsize_Dataflow < First_Dataflow      ;  def lattice;    Lattice_Maxsize;       end; end
class Cant_Fail_Dataflow  < First_Dataflow ;  def lattice;    Lattice_Cant_Fail;  end; end


class Minsize_Dataflow      < First_Dataflow;  def can_empty?(el);    true;                         end; end
class Maxsize_Dataflow      < First_Dataflow;  def can_empty?(el);    true;                         end; end
class Cant_Fail_Dataflow  < First_Dataflow;  def can_empty?(el);    true;                         end; end


class Lattice_Clas;       def self.top;    self[Object];      end;def self.bottom; self[]          ; end; end
class Lattice_Char;       def self.top;    self[[0,255]];     end;def self.bottom; self[]          ; end; end
class Lattice_Minsize;      def self.top;    self[1.0/0.0];     end;def self.bottom; self[0]         ; end; end
class Lattice_Maxsize;      def self.top;    self[1.0/0.0];     end;def self.bottom; self[0]         ; end; end
class Lattice_Cant_Fail;  def self.top;    self[false];       end;def self.bottom; self[true]      ; end; end

class Switch_Char_Dataflow < First_Dataflow
  def firstchar(s)
    return lattice.empty if s==""
    s=s[0].bytes.to_a[0]
    lattice[[s,s]]
  end
  def regchar(s)
    return ~regchar("/["+s[3...-2]+"]/") if s[2]==?^ 
    chars=[]
    s=s[2...-2]
    i=0
    while i<s.size
      c=s[i].bytes.to_a[0]
      if s[i+1]==?-
        chars<<[c,s[i+2].bytes.to_a[0]]
        i+=3
      elsif s[i]==?\\
        c=eval('"'+s[i,2]+'"')[0].bytes.to_a[0]
        chars<<[c,c]
        i+=2
      else
        chars<<[c,c]
        i+=1
      end
    end
    lattice[*chars]
  end
end

amethyst First_Dataflow {
  value =  .:x  {depends(x);@@vals[x]}

  root = .:x analyze(x)
  
  first = switch[ [ .:p  value:v {p.is_a?(lattice)? p & v : v}:[vals] ]* ] -> vals.inject(:|)
        | Seq[{lattice.bottom}:val (.:el {el}=>value:nev {val.seqjoin(nev)}:val  (~{can_empty?(el)} .* | {}) )*    {val}]
        | Many[value:val {val|lattice.bottom} ]
        | Apply[ :name .* &{Compiler.grammars[@clas]&&Compiler.grammars[@clas].rules[name]}  { Compiler.grammars[@clas].rules[name].body}=>value ]
        | Bind[ value] 
        | (Act|CAct|Local|Result|Cut|Stop|Pass|Lookahead)[.* {lattice.bottom} ]
        | .:el {lattice.top|lattice.bottom}

   getvalue(v) = {@@vis=v; v}=>first

  switch = Switch_Char | Switch_Clas
         | Or[.*:ary] -> Switch_Or.create(:ary=>ary.map{|k| [nil,k]})

}        

amethyst Minsize_Dataflow < First_Dataflow {
  first = Apply[( ["_seq"] CAct[.:str] {lattice[str.size]} 
                | ["anything" | "advance_char" | "advance_clas"] .* {lattice[1]}
                | ["fails"] {lattice.top}
                )]
        | super
}

amethyst Maxsize_Dataflow < First_Dataflow {
  first = Apply[( ["_seq"] CAct[.:str] {lattice[str.size]} 
                | ["anything" | "advance_char" | "advance_clas"] .* {lattice[1]}
                | ["fails"] {lattice.top}
                )]
        | super
}

amethyst Complexity_Dataflow < First_Dataflow {
  first = Apply[ :name  .*&{Compiler.grammars[@clas]&&Compiler.grammars[@clas].rules[name]}  { Compiler.grammars[@clas].rules[name].body}=>value:v ] -> lattice[2*v.value]
        | Many[ value:v ]            -> lattice[20*v.value]
        | Seq[ value*:v ]            -> lattice[v.map{|w| w.value}.inject(:+)]
        | switch[ [ . value:[v] ]* ] -> lattice[v.map{|w| w.value}.max+1]
        | .                          -> lattice[1]
}

amethyst Switch_Char_Dataflow < First_Dataflow{
  first = Apply[( ["_seq"  ] CAct[.:str] {firstchar(str)}
                | ["regch" ] Act[.:str]  {regchar(str)}
                | ["anything" ] {lattice.top}
                | ["fails"] {lattice.bottom}
                )]
        | super
}

amethyst Switch_Clas_Dataflow < First_Dataflow{
  first = Apply[ ["clas"] CAct[Class:cls] ] -> lattice[cls]
        | Apply[ ["fails"] ]                -> lattice.bottom
        | super
}


amethyst Cant_Fail_Dataflow < First_Dataflow{
	first = Act[ .* &{@pred} ]   -> lattice.top
				| Lookahead[.* ]       -> lattice.top
				| Apply[ ["advance_char" | "advance_clas"] ] -> lattice.bottom
				| Pass[ @to=>value ]
				| Or[ (~(Cut | Seq[ (Cut .* break | .)* ]) value)*:ary  eof ] -> lattice[ary.map{|e|e.value}.inject(:|)]
				| super
}



amethyst Detect_First < Traverser_Clone2 {
  itrans =   (Grammar[ {@>name=@name} {$rules={};@rules.each{|r| $rules[r.name]=r}} @rules=>[ Rule[root]*:rules ] {@rules=rules} @self] | .)*

  root = traverse

  must_empty = .:e &{must_empty?(e)} {e}
	cant_fail  = .:e &{cant_fail?(e) } {e}

  
  string_only = Apply[ ["regch" |"_seq"] .*]
  
  object_only = Apply[ ["clas"] .* ]


 combine_seq(cls,prefix) = must_empty:s combine_seq(cls,prefix+[s])
                      | clas(cls)[ .* @ary:ary ] .*:rest { cls[{:ary=>ary.map{|p,a| [p,Seq[*(prefix+[a]+rest)]]}}] }
                      | .*:ary {Seq[*(prefix+ary)]}

  combine_or(cls,lat,list) = clas(cls)[.* @ary:ary] {[]}:newlist
                           {list.each{|p,a| ary.each{|p2,a2| newlist << [p&p2,a+[a2]] if p&p2!=lat.bottom}}}
                           combine_or(cls,lat,newlist)
                  | .:n {list.map{|p,a| [p,a+[n]]}}:newlist
                           combine_or(cls,lat,newlist)
                  | eof {cls[{:ary=>list.map{|p,a| [p,Or[*a]]}}]}
}


class Detect_Switch_Char < Detect_First
  def first(s)
    if !$switchdf_char
      $switchdf_char=Switch_Char_Dataflow.new;     $switchdf_char.parse(:root,[])
    end
    $switchdf_char.analyze(s)
  end
end

class Detect_Switch_Clas < Detect_First
  def first(s)
    if !$switchdf_clas
      $switchdf_clas=Switch_Clas_Dataflow.new;      $switchdf_clas.parse(:root,[])
    end
    $switchdf_clas.analyze(s)
  end
end



#TODO we can do unicode almost unchanged but we need test againist first byte of character

class Detect_Switch_Char < Detect_First
  memoize "traverse"
  use_global_memo
end
amethyst Detect_Switch_Char < Detect_First {
  visit = Apply[ ["regch"] Act[.*] {first(@self)}:firs {s=Switch_Char[{:ary=>[[firs,Apply["advance_char"]],[~firs,Apply["fails"]]]}]}]
        | Apply[ ["_seq"] CAct[.:str] 
                  {first(@self)}:firs {s=Switch_Char[{:ary=>[[firs,Seq[Apply["advance_char"],Apply["_seq",CAct[str[1..-1]]]]],[~firs,Apply["fails"]]]}]}]
        | Apply[ ["fails"] {@self} ]
        | Apply[ .*  {first(@self)}:firs &{!can_empty?(@self) && firs!=Lattice_Char.top} {s=Switch_Char[{:ary=>[[firs,@self],[~firs,Apply["fails"]]]}] }]
#       | Many[ traverse:t first(t):firs &{!can_empty?(@self) && firs!=Lattice_Char.top} {s=Switch_Char[{:ary=>[[firs,Many[t]],[~firs,Apply["empty"]]]}] }]
        | Seq[ traverse_item*=>[combine_seq(Switch_Char,[])] ]
        | Or[ (traverse_item)*:items {false}:aswitch {items.each{|i| aswitch=true if i.is_a?(Switch_Char)}}
              ( &{!aswitch} {Or[*items]} 
              |  {items}=>[ combine_or(Switch_Char,Lattice_Char,[[Lattice_Char.top,[]]]) ]
              )
            ]
}

class Detect_Switch_Clas < Detect_First
  memoize "traverse"
  use_global_memo
end
amethyst Detect_Switch_Clas < Detect_First {
  visit = Apply[ ["clas"] CAct[Class:clas]   {Switch_Clas[[Lattice_Clas[clas],Apply["advance_clas"]],[Lattice_Clas[Object],Apply["fails"]]].freeze }]
        | Apply[ ["fails"] {@self} ]
        | Apply[ .* first(@self):firs &{!can_empty?(@self) && !firs.ary.include?(Object)} {c=Switch_Clas[{:ary=>firs.ary.map{|a| [Lattice_Clas[a],@self]}+[[Lattice_Clas[Object],Apply["fails"]]]}];puts c.inspect;c }]  
        | Seq[ traverse_item*=>[combine_seq(Switch_Clas,[])] ]
        | Or[ (traverse_item)*:items {false}:aswitch {items.each{|i| aswitch=true if i.is_a?(Switch_Clas)}}
              ( &{!aswitch} {Or[*items]} 
              |  {items}=>[ combine_or(Switch_Clas,Lattice_Clas,[[Lattice_Clas.top,[]]]) ]
              )
            ]

}

amethyst Detect_Size {
	predicate(s) = .:el {minsize(el)}:msize {el}=>predicate2([s,msize].max):el -> msize>s ? Seq[Apply["test_size",Act[msize]],el] : el

 	predicate2(s) = Seq[ (  predicate(s):el {s=[s-maxsize(el),0].max} {el} )*:ary ] @Seq
                | Or[ predicate(s)*:ary ]                                         @Or
								| Apply["anything"] -> #lowlevel representation that cant fail

}
