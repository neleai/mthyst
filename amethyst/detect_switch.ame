class Anything_
	def inspect
		"Anything"
	end
end
Anything=Anything_.new
class Empty_
  def inspect
    "Empty"
  end
end
Empty=Empty_.new

class SizesLattice
	attr_accessor :size
	def self.bottom
		self[0]
	end
	def self.empty
		self[0]
	end
	def self.top
		self[1.0/0.0]
	end
	def self.[](a)
		l=self.new
		l.size=a
		l
	end
	def |(a)
		SizesLattice[ [size,a.size].min ]
	end
	def seqjoin(a)
		SizesLattice[ size+a.size ]
	end
end

class FirstLattice
	attr_accessor :ary
  def self.empty
    self[Empty]
  end
  def self.bottom
    self[]
  end
	def |(a)
		self.class[*(ary|a.ary)]
	end
	def -(a)
		self.class[*(ary-a.ary)]
	end
	def &(a)
		self.class[*(ary&a.ary)]
	end
	def seqjoin(a)
    return self unless self.ary.include? Empty
    (self-self.class.empty)|a
  end
	def ==(a)
		return false unless a.is_a?(FirstLattice)
		ary.sort_by{|e| e.inspect}==a.ary.sort_by{|e| e.inspect}
	end

	def cases(first)
		ary.map{|c| c=="default" ? "default:;" : "case #{c}:;"}*""
	end
end

class CharLattice < FirstLattice
	def self.[](*ary)
		c=CharLattice.new
		c.ary=ary.uniq
		c
	end
	def self.top
		CharLattice[Anything]
	end
	def cchar(c)
		return "UC('\\'')" if c==?'
		"UC('#{c.chr.inspect[1...-1]}')"
	end
  def cases(first)
    ary.map{|c| c=="default" ? "default:;" : "case #{cchar(c[0])} ... #{cchar(c[1])}:;"}*""
  end
	def sentinel;[[256,255]];end
	def ~
		return CharLattice.top
		first=0
		nary=[]
		(normalize.ary+sentinel).each{|beg,en|
			nary<<[first,beg-1] if first<=beg-1
			first=en+1
		}
		CharLattice[*nary]
	end
	def normalize
		nary=[]
		first,last=*ary.sort[0]
		puts ary.inspect
		(ary.sort+sentinel).each{|beg,en|
			if beg<=last+1
				last=en
			else
				nary<<[first,last]
				first,last=beg,en
			end
		}
		@ary=nary
		self
	end
end

class ClasLattice < FirstLattice
  attr_accessor :ary
  def self.[](*ary)
    c=ClasLattice.new
    c.ary=ary.uniq
    c
  end
  def self.top
    ClasLattice["Object"]
  end
end
class First_Dataflow < Amethyst
	def initialize
    @depend=Oriented_Graph.new
    @vals=Hash.new(CharLattice.bottom)
		@visited={}
  end

	def analyze(e)
    @active={}
    @activea=[e]
		while el=@activea.pop
			@active.delete(el)
      val=getvalue(el)
      if val!=@vals[el]
        @vals[el]=val
        @depend.edges[el].each{|d| addactive(d)}
      end

		end
		@vals[e]
	end 
	def depends(e)
		@depend.add(e,@vis) unless @depend.edges[e].include?(@vis)
		if !@visited[e]
			@visited[e]=true
			addactive(e)
		end
	end
	def addactive(e)
    if !@active[e]
      @active[e]=true
      @activea<<e
    end
  end
end
class Sizes_Dataflow < First_Dataflow
	def lattice
		SizesLattice
	end
end

class Switch_Dataflow < First_Dataflow
  def firstchar(s)
	  return lattice.empty if s==""
    s=s[0]
		lattice[[s,s]]
  end
	def regchar(s)
		return ~regchar("/["+s[3...-2]+"]/") if s[2]==?^ 
		chars=[]
		s=s[2...-2]
		i=0
		while i<s.size
			c=s[i]
			if s[i+1]==?-
				chars<<[c,s[i+2]]
				i+=3
			elsif c==?\\
				raise "stray \\" if i==s.size-1
				c=eval('"'+s[i,2]+'"')[0]
				i+=2
			else
				chars<<[c,c]
				i+=1
			end
		end
		lattice[*chars]
	end
	def lattice
		CharLattice
	end
end

class ClasSwitch_Dataflow < First_Dataflow
	def lattice
		ClasLattice
	end
end
amethyst First_Dataflow {
	value =  .:x  {depends(x); @@vals[x]}


	root = .:x analyze(x)
	
	first =	Switch[&{@first.is_a?(lattice)} .* {@first}]
				| Seq[value*:{it.inject{|u,v|u.seqjoin(v)}}]
				| Many[value:val {val|lattice.empty} ]
				| Or[value*:{it.inject(:|)}]
				| Switch[value*:{it.inject(:|)}]
	      | Bind[@expr=>value] 
				| (Act|CAct)[.* {lattice.empty} ]
				| . {lattice.top|lattice.empty}
}  			

amethyst Sizes_Dataflow < First_Dataflow {
	first = Apply[( ["_seq"] CAct[.:str] {lattice[str.size]} 
								| ["regch" | "clas" | "anything"] {lattice[1]}
								)]
			  | super
}

amethyst Switch_Dataflow < First_Dataflow{
	first = Apply[( ["_seq"  ] CAct[.:str] {firstchar(str)}
								| ["regch" ] Act[.:str]  {regchar(str)}
								| ["anything" ] {lattice.top}
							  )]
				| super

	getvalue(v) = {@@vis=v; v}=>first
}

amethyst ClasSwitch_Dataflow < First_Dataflow{
  first = Apply[ ["clas"] Act[.:cls] {lattice[cls]}]
        | super
				| Apply[ :name &{$rules[name]} .* {$rules[name].body}=>value]

	getvalue(v) = {@@vis=v; v}=>first
}

class Detect_First< Traverser_Clone2
end

class Detect_Switch < Detect_First
	def first(s)
		if !@switchdf
			@switchdf=Switch_Dataflow.new
			@switchdf.parse(:root,[])
			@sizedf=Sizes_Dataflow.new
			@sizedf.parse(:root,[])

		end
		r=@switchdf.analyze(s)
		return r
	end
	def intersects(ar,el)
		return true if ar & [Empty,Anything] != []
		return ar & [el] !=[]
	end
end

class Detect_ClasSwitch < Detect_First
	def first(s)
		if !@switchdf
			@switchdf=ClasSwitch_Dataflow.new
			@switchdf.parse(:root,[])
		end
		r=@switchdf.analyze(s)
		return (r|ClasLattice.top)-ClasLattice.empty if r.ary.include?(Empty)
		return r
	end
	def child(par,chld)
		 par,chld=eval(par),eval(chld)
		 par<=chld
	end
	def includes(ary,i,p)
		i.times{|ii|
			s=true
			p.ary.each{|f| s=false unless child(f,ary[ii])}
			return false if s
		}
		p.ary.each{|f| return true if child(ary[i],f) || child(f,ary[i])}
		return false
	end
	def classswitch(ary)
		@no=(@no||0)+1
		rb="def self.switchcb_#{@name}#{@no}(e)\n"
		ary.each_with_index{|c,i| rb<< "return #{i} if e<=#{c}\n"}
		rb+="return #{ary.size}\nend\n"
		rb+="@@switchhash#{@name}#{@no}=Hash.new{|h,k| h[k]=switchcb_#{@name}#{@no}(k)}\n"
		rb+="def switchcb#{@name}#{@no}(e)\n"
		rb+="@@switchhash#{@name}#{@no}[e.class]\n"
		rb+="end"
		[rb, "FIX2INT(CALL(switchcb#{@name}#{@no},1,ame_curobj(self)))"]
	end
	def topsort(a)
		a=a.uniq
		g=Oriented_Graph.new
		a.each{|u| a.each{|v| g.add(u,v) if child(v,u)}}
	 	g.topo_order
	end
end

amethyst Detect_First < Traverser_Clone2 {
	itrans =   (Grammar[ {@@name=@name} {$rules={};@rules.each{|r| $rules[r.name]=r}} @rules=>[ Rule[root]*:rules ] {@rules=rules} @self] | .)*

	root = traverse
}

amethyst Detect_Switch < Detect_First {
	visit = Or[ {CharLattice[]}:ary2 {[]}:ary3 {[]}:els
		(traverse_item:e &{first(e)} {e}:els[] {ary2|=first(e)})* &eof
		{ary2}:firs
		{ary2=ary2.ary.map{|e|  [Anything,Empty].include?(e) ? "default" : e}.uniq}
		&{ary2.size>1}
		{Or[*els]}:new_or
		&{new_or.is_a?(Or)}
		{ary2.each{|e|
			ary3<<[e,predicate(e,new_or)]
		}}
		{ary3=ary3.group_by{|a,b| b}.map{|y,v| [v.map{|k,val| k}.sort_by{|e| e.inspect},v[0][1]]}.sort_by{|e| e.inspect}}
		{ary3<<[["default"],Apply["fails"]] unless ary2.include?("default")}
		{ary3=ary3.map{|o,v| [CharLattice[*o],v]}}
    &{ary3.size>1}
		{Switch[{:act=>"*ame_curstr(self)",:first=>firs,:ary=>ary3}]}
	]
	
	split(p) = {p}=>(Apply[ ["_seq"] .* ])

	predicate(chr,p) = &{chr=="default"} {p}
										| &{!intersects(first(p).ary,chr)} {Placeholder}
                    |  {p}=>( Seq[ .:e predicate(chr,e):f .*:rest {Seq[*([f]+rest)]} ]
														| Or[ (.:e predicate(chr,e))*:ary {Or[*ary]} ]
														| Switch[.*{
																 nary=p.ary
                                 nary=nary.select{|o,v| intersects(o.ary,chr)} if p.first.is_a?(CharLattice)
                                 nary=nary.map{|o,v| [o,predicate(chr,v)]}.select{|o,v| v!=Placeholder}
                                 Switch[{:act=>p.act,:first=>p.first,:defs=>p.defs,:ary=>nary}]
                              }]
														| . 
														)
}

amethyst Detect_ClasSwitch < Detect_First {
	visit = Or[ {ClasLattice.bottom}:ary2 {[]}:ary3 {[]}:els
 		(traverse_item:e &{first(e)} {e}:els[] {ary2|=first(e)})* &eof
		{ary2}:firs
		{ary2=topsort(ary2.ary+["Object"])}
		&{ary2.size>1}
		{Or[*els]}:new_or
    {	ary2.each_index{|i|
      	ary3<<[i,predicate(ary2,i,new_or)]
		}}
    {ary3=ary3.map{|o,v| v==Placeholder ? [o,Apply["fails"]] : [o,v]}}

		{ary3=ary3.group_by{|a,b| b}.map{|y,v| [v.map{|k,val| k}.sort_by{|e| e.inspect},v[0][1]]}.sort_by{|e| e.inspect}}
		{ary3=ary3.map{|o,v| [ClasLattice[*o],v]}}
	  {c=classswitch(ary2);Switch[{:act=>c[1],:first=>firs,:defs=>c[0],:ary=>ary3}]}
	]

  predicate(clas,i,p) = &{clas[i]=="default"} {p}
											| &{!includes(clas,i,first(p))} {Placeholder}	
											|	{p}=>( Seq[ .:e predicate(clas,i,e):f .*:rest {Seq[*([f]+rest)]} ]
														 | Or[ (.:e predicate(clas,i,e))*:ary {Or[*ary]} ]
									  				 | Apply[ .:name &{name=="clas"} Act[.:match] &{child(clas[i],match)&&clas[i]==match} {Apply["anything"]}] 
 										  			 | Bind[@name:name {predicate(clas,i,@expr)}:expr  {_Bind(name,expr)}]
											  		 | .
												  	 )
}

