def firstchar(s)
	s=(s[13]==?\\ ) ? s[13,2] : s[13,1]
	eval('"'+s+'"')[0]
end
def first(s)
	if s.is_a?(Seq)
		return first(s[0])
	end
	if s.is_a? Bind
		return first(s.expr)
	end
	if s.is_a? Or
		a=[]
		s.ary.each{|e| 
		return nil if !first(e)
			a+=first(e)}
		return a.uniq
	end
	if s.is_a?(Apply) && s[0]=="seq"
		return nil if s[1][0].size==15
		[firstchar(s[1][0])]
	end
end

amethyst Detect_Switch < Traverser {
	itrans =   (Grammar[ @rules=>[ Rule[root]*:rules ] {@rules=rules} @self] | .)*

	root = traverse

	visit = Or[{Hash.new{|h,k|h[k]=[]} }:ary2
		{puts @self.inspect}
		(traverse_item:e &{first(e)} {puts e.inspect} { first(e).each{|a| ary2[a]<<e}})*
		{s=Switch[{:act=>"RSTRING(ame_getsrc(self))->ptr[ame_getpos(self)]",:ary=>ary2.to_a.map{|h,k| [h,Or[{:ary=>k}]]}}];puts s.inspect;s}
	]
}

