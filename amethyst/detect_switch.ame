class Switch_Dataflow < Amethyst
	def seqjoin(first,second)
		if first.include? :empty
			return (first-Set[[:empty]])+second
		else
			return first 
		end
	end
  def firstchar(s)
	  return :empty if s.size==15
    s=(s[13]==?\\ ) ? s[13,2] : s[13,1]
    eval('"'+s+'"')[0]
  end
end
amethyst Switch_Dataflow {
	first = Seq[value*:{it.inject{|u,v|seqjoin(u,v)}}]
				| Or[value*:{it.inject(:+)}]
				| Switch[value*:{it.inject(:+)}]
				| Bind[@expr=>value]
				| Act[.* {Set[:empty]} ]
				| Apply[ ["seq"] CAct[.:str] {Set[firstchar(str)]}]
				| . {Set[:anything,:empty]}

	value = first
}

class Detect_Switch < Traverser
	def first(s)
		r=Switch_Dataflow.new.parse(:first,[s])
		return nil if r.include?(:anything)
		return r
	end
	def intersects(p,e)
		first(p).intersection(Set[e,:empty,:anything])!=Set[]
	end
end

amethyst Detect_Switch < Traverser {
	itrans =   (Grammar[ @rules=>[ Rule[root]*:rules ] {@rules=rules} @self] | .)*

	root = traverse

	visit = Or[ {Set[]}:ary2 {[]}:ary3
		(traverse_item:e &{first(e)} {ary2+=first(e)})* &eof
		{ary2.sort.uniq.each{|e| 
			ary3<<[e,Or[{:ary=>@ary.select{|p|intersects(p,e)}}]]
		}}
		{Switch[{:act=>"*ame_curstr(self)",:ary=>ary3}]}
	]
}
class Detect_ClasSwitch < Traverser
	def first(s)
		if s.is_a?(Seq)
      return first(s[0])
    end
		if s.is_a? Bind
			return first(s.expr)
		end
		if s.is_a? Switch
			a=[]
			s.ary.each{|k,v|
				return nil if !first(v)
			a+=first(v)}
			return a.uniq
		end
		if s.is_a? Or
			a=[]
			s.ary.each{|e| 
			return nil if !first(e)
				a+=first(e)}
			return a.uniq
		end
		if s.is_a?(Apply) && s[0]=="clas"
			return [s[1][0]]
		end
		if s.is_a?(Apply) #&& s[0]=="anything"
			return ["Object"]
		end
	end
	def child(par,chld)
		 par,chld=eval(par),eval(chld)
		 par<=chld
	end
	def includes(ary,i,p)
		i.times{|ii|
			s=true
			p.each{|f| s=false unless child(f,ary[ii])}
			return false if s
		}
		p.each{|f| return true if child(ary[i],f) || child(f,ary[i])}
		return false
	end
	def classswitch(ary)
		@no=(@no||0)+1
		rb="def self.switchcb_#{@name}#{@no}(e)\n"
		ary.each_with_index{|c,i| rb<< "return #{i} if e<=#{c}\n"}
		rb+="return #{ary.size}\nend\n"
		rb+="@@switchhash#{@name}#{@no}=Hash.new{|h,k| h[k]=switchcb_#{@name}#{@no}(k)}\n"
		rb+="def switchcb#{@name}#{@no}(e)\n"
		rb+="@@switchhash#{@name}#{@no}[e.class]\n"
		rb+="end"
		[rb, "FIX2INT(CALL(switchcb#{@name}#{@no},1,ame_curobj(self)))"]
	end
	def topsort(a)
		a=a.uniq
		g=Oriented_Graph.new
		a.each{|u| a.each{|v| g.add(u,v) if child(v,u)}}
	 	g.topo_order
	end
end

amethyst Detect_ClasSwitch < Traverser {
	itrans =   (Grammar[ {@@name=@name} @rules=>[ Rule[root]*:rules ] {@rules=rules} @self] | .)*

	root = traverse

	visit = Or[ {[]}:ary2 {[]}:ary3
    (traverse_item:e &{first(e)} {ary2+=first(e)})* &eof
		{ary2=topsort(ary2)}
		&{ary2.size>1}
    {	ary2.each_with_index{|e,i|
      	ary3<<[i,Or[{:ary=>@ary.select{|p| includes(ary2,i,first(p))}.map{|p| predicate(e,p)}}]]
		}}
    {c=classswitch(ary2);s=Switch[{:act=>c[1],:defs=>c[0],:ary=>ary3}];puts s.inspect;s}
	]

  predicate(clas,p) = {p}=>( Seq[ .:first .*:rest  {Seq[[predicate(clas,first)]+rest]} ]
													 | Apply[ .:name &{name=="clas"} Act[.:match] &{child(clas,match)&&clas==match} {Apply["anything"]}] 
 													 | Bind[@name:name {predicate(clas,@expr)}:expr  @Bind]
													 | .
													 )
}

