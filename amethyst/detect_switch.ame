class Detect_Switch < Traverser
	def firstchar(s)
		s=(s[13]==?\\ ) ? s[13,2] : s[13,1]
		eval('"'+s+'"')[0]
	end
	def first(s)
		if s.is_a?(Seq)
			return first(s[0])
		end
		if s.is_a? Bind
			return first(s.expr)
		end
		if s.is_a? Switch
			a=[]
			s.ary.each{|k,v| a<<k}
			return a.uniq
		end
		if s.is_a? Or
			a=[]
			s.ary.each{|e| 
			return nil if !first(e)
				a+=first(e)}
			return a.uniq
		end
		if s.is_a?(Apply) && s[0]=="seq"
			return nil if s[1][0].size==15
			return [firstchar(s[1][0])]
		end
	end
end

amethyst Detect_Switch < Traverser {
	itrans =   (Grammar[ @rules=>[ Rule[root]*:rules ] {@rules=rules} @self] | .)*

	root = traverse

	visit = Or[{Hash.new{|h,k|h[k]=[]} }:ary2
		(traverse_item:e &{first(e)}  { first(e).each{|a| ary2[a]<<e}})*
		{Switch[{:act=>"RSTRING(ame_getsrc(self))->ptr[ame_getpos(self)]",:ary=>ary2.to_a.map{|h,k| [h,Or[{:ary=>k}]]}}];}
	]
}
class Detect_ClasSwitch < Traverser
	def initclas
		@clses={}
	end
	def firstclas(s)
		if s.is_a?(Seq)
      return firstclas(s[0])
    end
		if s.is_a?(Apply) && s[0]=="clas"
			e=s[1][0]
			return [@clses[e]] if @clses[e]
			@clses[e]=@clses.size
			return [@clses[e]]
		end
	end
	def classswitch()
		@no=(@no||0)+1
		rb="def switchcb#{@no}(e)\n"
			@clses.each{|k,v| rb+="return #{v} if e.is_a? #{k}\n"}
		rb+="return #{@clses.size}\nend"
		[rb, "CALL(switchcb#{@no})"]
	end
end

amethyst Detect_ClasSwitch < Traverser {
	itrans =   (Grammar[ @rules=>[ Rule[root]*:rules ] {@rules=rules} @self] | .)*

	root = traverse

	visit = Or[{Hash.new{|h,k|h[k]=[]} }:ary2 {initclas}
		(traverse_item:e &{firstclas(e)}  { firstclas(e).each{|a| ary2[a]<<e}})*
		{c=classswitch; Switch[{:defs=>c[0], :act=>c[1], :ary=>ary2.to_a.map{|h,k| [h,Or[{:ary=>k}]]}}];}
	]
}

