class Switch_Dataflow < Amethyst
  def firstchar(s)
	  return :empty if s.size==15
    s=(s[13]==?\\ ) ? s[13,2] : s[13,1]
    eval('"'+s+'"')[0]
  end
end

class Chars
	attr_accessor :ary
	def self.[](*ary)
		c=Chars.new
		c.ary=ary
		c
	end
	def self.top
		Chars[:anything]
	end
	def self.empty
		Chars[:empty]
	end
	def +(a)
		c=Chars.new
		c.ary=(ary+a.ary).uniq
		c
	end
	def -(a)
		c=Chars.new
		c.ary=(ary-a.ary).uniq
		c
	end
	def &(a)
		c=Chars.new 
    c.ary=(ary&a.ary).uniq
    c
	end
	def seqjoin(a)
		return self unless a.ary.include? :empty
		(self-Chars[:empty])+a
	end
end

amethyst Switch_Dataflow {
	first = Seq[value*:{it.inject{|u,v|u.seqjoin(v)}}]
				| Or[value*:{it.inject(:+)}]
				| Switch[value*:{it.inject(:+)}]
				| Bind[@expr=>value]
				| Many[value:val {val+Chars.empty} ]
				| Act[.* {Chars.empty} ]
				| Apply[ ["seq"] CAct[.:str] {Chars[firstchar(str)]}]
				| Apply[ ["anything" ] {Chars.top}]
				| Apply[ ["regch" ] {Chars.top}]
				| . {Chars.top+Chars.empty}
				
				value = {@@cached||={}} .:x (&{@@cached[x]} 
																		| ({x}=>first):v {@@cached[x]=v} )

}

class Detect_Switch < Traverser_Clone2
	def first(s)
		@switchdf||=Switch_Dataflow.new
		r=@switchdf.parse(:first,[s])
		return r
	end
	def intersects(p,e)
		return true if e==:default
		r=(first(p).ary & [e,:empty,:anything])!=[]
		puts first(p).ary.inspect
		puts [e,:empty,:anything].inspect
		puts r
		r
	end
end

amethyst Detect_Switch < Traverser_Clone2 {
	itrans =   (Grammar[ @rules=>[ Rule[root]*:rules ] {@rules=rules} @self] | .)*

	root = traverse

	visit = Or[ {Chars[]}:ary2 {[]}:ary3
		(traverse_item:e &{first(e)} {ary2+=first(e)})* &eof
		{ary2=ary2.ary.map{|e|  [:anything,:empty].include?(e) ? :default : e}.uniq}
		&{ary2.size>1}
		{ary2.each{|e|
			ary3<<[e,Or[{:ary=>@ary.select{|p|intersects(p,e)}}]]
		}}
		{ary3=ary3.group_by{|a,b| b.to_yaml}.map{|y,v| [v.map{|k,val| k},v[0][1]]}}
		{ary3<<[[:default],Apply["fails"]] unless ary2.include?(:default)}
    &{ary3.size>1}
		{Switch[{:act=>"*ame_curstr(self)",:ary=>ary3}]}
	]
}
class Detect_ClasSwitch < Traverser_Clone2
	def first(s)
		if s.is_a?(Seq)
      return first(s[0])
    end
		if s.is_a? Bind
			return first(s.expr)
		end
		if s.is_a? Switch
			a=[]
			s.ary.each{|k,v|
				return nil if !first(v)
			a+=first(v)}
			return a.uniq
		end
		if s.is_a? Or
			a=[]
			s.ary.each{|e| 
			return nil if !first(e)
				a+=first(e)}
			return a.uniq
		end
		if s.is_a?(Apply) && s[0]=="clas"
			return [s[1][0]]
		end
		if s.is_a?(Apply) #&& s[0]=="anything"
			return ["Object"]
		end
	end
	def child(par,chld)
		 par,chld=eval(par),eval(chld)
		 par<=chld
	end
	def includes(ary,i,p)
		i.times{|ii|
			s=true
			p.each{|f| s=false unless child(f,ary[ii])}
			return false if s
		}
		p.each{|f| return true if child(ary[i],f) || child(f,ary[i])}
		return false
	end
	def classswitch(ary)
		@no=(@no||0)+1
		rb="def self.switchcb_#{@name}#{@no}(e)\n"
		ary.each_with_index{|c,i| rb<< "return #{i} if e<=#{c}\n"}
		rb+="return #{ary.size}\nend\n"
		rb+="@@switchhash#{@name}#{@no}=Hash.new{|h,k| h[k]=switchcb_#{@name}#{@no}(k)}\n"
		rb+="def switchcb#{@name}#{@no}(e)\n"
		rb+="@@switchhash#{@name}#{@no}[e.class]\n"
		rb+="end"
		[rb, "FIX2INT(CALL(switchcb#{@name}#{@no},1,ame_curobj(self)))"]
	end
	def topsort(a)
		a=a.uniq
		g=Oriented_Graph.new
		a.each{|u| a.each{|v| g.add(u,v) if child(v,u)}}
	 	g.topo_order
	end
end

amethyst Detect_ClasSwitch < Traverser_Clone2 {
	itrans =   (Grammar[ {@@name=@name} @rules=>[ Rule[root]*:rules ] {@rules=rules} @self] | .)*

	root = traverse

	visit = Or[ {[]}:ary2 {[]}:ary3
    (traverse_item:e &{first(e)} {ary2+=first(e)})* &eof
		{ary2=topsort(ary2+["Object"])}
		&{ary2.size>1}
    {	ary2.each_with_index{|e,i|
      	ary3<<[i,Or[{:ary=>@ary.select{|p| includes(ary2,i,first(p))}.map{|p| predicate(e,p)}}]]
		}}
		{ary3=ary3.group_by{|a,b| b.ary}.map{|y,v| [v.map{|k,val| k}.sort,v[0][1]]}.sort}
	  {c=classswitch(ary2);s=Switch[{:act=>c[1],:defs=>c[0],:ary=>ary3}];puts s.inspect;s}
	]

  predicate(clas,p) = {p}=>( Seq[ .:first .*:rest  {Seq[[predicate(clas,first)]+rest]} ]
													 | Apply[ .:name &{name=="clas"} Act[.:match] &{child(clas,match)&&clas==match} {Apply["anything"]}] 
 													 | Bind[@name:name {predicate(clas,@expr)}:expr  @Bind]
													 | .
													 )
}

