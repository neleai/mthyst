class Detect_Switch < Traverser
	def firstchar(s)
		s=(s[13]==?\\ ) ? s[13,2] : s[13,1]
		eval('"'+s+'"')[0]
	end
	def first(s)
		if s.is_a?(Seq)
			return first(s[0])
		end
		if s.is_a? Bind
			return first(s.expr)
		end
		if s.is_a? Switch
			a=[]
			s.ary.each{|k,v| a+=first(v)}
			return a.uniq
		end
		if s.is_a? Or
			a=[]
			s.ary.each{|e| 
			return nil if !first(e)
				a+=first(e)}
			return a.uniq
		end
		if s.is_a?(Apply) && s[0]=="seq"
			return nil if s[1][0].size==15
			return [firstchar(s[1][0])]
		end
	end
end

amethyst Detect_Switch < Traverser {
	itrans =   (Grammar[ @rules=>[ Rule[root]*:rules ] {@rules=rules} @self] | .)*

	root = traverse

	visit = Or[ {[]}:ary2 {[]}:ary3
		(traverse_item:e &{first(e)} {ary2+=first(e)})* &eof
		{ary2.sort.uniq.each{|e| 
			ary3<<[e,Or[{:ary=>@ary.select{|p| first(p).include?(e)}}]]
		}}
		{Switch[{:act=>"*ame_curstr(self)",:ary=>ary3}]}
	]
}
class Detect_ClasSwitch < Traverser
	def first(s)
		if s.is_a?(Seq)
      return first(s[0])
    end
		if s.is_a? Bind
			return first(s.expr)
		end
		if s.is_a? Switch
			a=[]
			s.ary.each{|k,v| a+=first(v)}
			return a.uniq
		end
		if s.is_a? Or
			a=[]
			s.ary.each{|e| 
			return nil if !first(e)
				a+=first(e)}
			return a.uniq
		end
		if s.is_a?(Apply) && s[0]=="clas"
			return [s[1][0]]
		end
	end
	def includes(p,e)
		p.each{|f| return true if eval(e) >= eval(f) || eval(e) <= eval(f)}
		return false
	end
	def classswitch(ary)
		@no=(@no||0)+1
		rb="def switchcb#{@no}(e)\n"
		ary.each_with_index{|c,i| rb<< "return #{i} if e.is_a?(#{c})\n"}
		rb+="return #{ary.size}\nend"
		[rb, "FIX2INT(CALL(switchcb#{@no},1,ame_curobj(self)))"]
	end
end

amethyst Detect_ClasSwitch < Traverser {
	itrans =   (Grammar[ @rules=>[ Rule[root]*:rules ] {@rules=rules} @self] | .)*

	root = traverse

	visit = Or[ {[]}:ary2 {[]}:ary3
    (traverse_item:e &{first(e)} {ary2+=first(e)})* &eof
    {	ary2.sort.uniq.each_with_index{|e,i|
      	ary3<<[i,Or[{:ary=>@ary.select{|p| includes(first(p),e)}}]]
		}}
    {c=classswitch(ary2.sort.uniq);Switch[{:act=>c[1],:defs=>c[0],:ary=>ary3}]}
	]
}

