
class AmethystCTranslator < Amethyst 
	def addcallback2(cb)
		@cbno||=0
		@cbno+=1
		n=Local["#{@rulename}_#{@grammar}cb",@cbno].desc
		@callbacks[n]=cb
		n
	end
	def bget(s)
		"rb_hash_aref(bind,ID2SYM(rb_intern(\"#{s}\")))"
		"BGET(#{s})"
	end
	def bset(s,e)
		"rb_hash_aset(bind,ID2SYM(rb_intern(\"#{s}\")),#{e})"
		"BSET(#{s},#{e})"
	end
	def iget(s)
		"rb_ivar_get(self,rb_intern(\"@#{s}\"))"
		"IGET(#{s})"
	end
	def iset(s,e)
		"rb_ivar_set(self,rb_intern(\"@#{s}\"),#{e})"
		"ISET(#{s},#{e})"
	end
	def resetlabels
		@labels=Hash.new(0)
	end
	def label(s)
		@labels[s]+=1
		"#{s}#{@labels[s]}"
	end
	def mktable(r)
		@ruletable={}
		r.each{|e| @ruletable[e.name]=e}
	end
end

amethyst AmethystCTranslator < Amethyst {
	itrans = {[]}:ruby {[]}:c {[]}:init  ( char:ruby[]  | trans:{c<<it[0];init<<it[1];ruby<<it[2]} )* -> [c,init,ruby]
	
	transfn = trans:t -> "proc{#{t}}"
	rbtrans = Local[.* {"bind[:#{@desc}]"}]
					| Args[rbtrans*:a] -> a*""
					| Array[rbtrans*:a] -> a*""
		      | Strin[rbtrans*:a] -> a*""
		      | Key[@name:name] -> "@src.#{name}"
      		| Global[:name] -> "@#{name}"
    		  | Exp[addlambda ] 
		      | .


	rbcode = {"class #{@@grammar} < #{@@parent}\n"}:s
	{@@callbacks.to_a.sort}=>[([:k :v]   {"def #{k}(bind)\n#{v}\nend\n"})*:x ]
	{s+=x*""}
	{s+="\nend"; s}
	
	trans =  Grammar[ {@@grammar=@name;@@parent=@parent} {@@lambdas=[]} {@@defmethods=[]} {@@faillabel="fail"} {@@callbacks={}} {mktable(@rules)} {@@header=[]} @rules=>[trans*]:t rbcode:rbcode
				    { "VALUE cls_#{@name};\n" }:s
						{	s<<@@header.sort*"\n"+"\n"
							s<<t.sort*"\n"
							s<<@@lambdas*"\n"
        		  init="\n cls_#{@name}=rb_define_class(\"#{@name}\",rb_const_get(rb_cObject,rb_intern(\"#{@@parent}\"))); 
failobj=rb_eval_string(\"FAIL\");
#{@@defmethods.sort*"\n" }
"
							[s,init,rbcode] } ]
				|  Rule[@name:name {@@rulename=name; Local.resetnumbering;resetlabels} @body=>trans:body  
          { h="VALUE #{@@grammar}_#{name}(VALUE self #{@args.size.times.map{|i| ",VALUE a#{i}"}})" 
						@@header<<h+";"
						@@defmethods<< "rb_define_method(cls_#{@@grammar},\"#{@name}\",#{@@grammar}_#{@name},#{@args.size});"
						h+"{VALUE vals[#{@args.size}]; VALUE bind=rb_hash_new(); #{@args.size.times.map{|i| bset(@args[i].desc,"a#{i}")+";"}} int x;VALUE arg0,arg1,arg2,arg3;\n#{body}\nreturn #{bget(Local["_result",@bnding].desc)};\nfail: return failobj; }" } ]
				| Act[ .*:{addcallback(@pred ? ["(",it,") || FAIL"] : it)}:cbno {"#{bset("it","CALL(#{cbno},1,bind)")}; #{@pred ? "FAILTEST(#{@@faillabel});" :"" }"} ]
				| Apply[ .=>["super"] {rule=@@ruletable[@@rulename];  failwrap(rule.args.size.times.map{|i|"vals[#{i}]=#{bget(rule.args[i].desc)};"}*""+ bset("it","rb_call_super(#{rule.args.size},vals)")+";")} ]
				| Apply[:name (.:{addcallback(it)}*):args 
            failwrap(" #{args.size.times.map{|a|"arg#{a}=CALL(#{args[a]},1,bind);"}} #{bset("it","CALL(#{name},#{args.size} #{args.size.times.map{|a|",arg#{a}"}})")};")]
				| Seq[ trans*:t {t*""} ]
				| Set[ @expr=>trans:e {"#{e}\n #{bset(@name.desc,bget("it"))}; " } ]
				| Or[ {label("accept")}:accept {@@faillabel}:fail {label("oldinput")}:oldinput label("alt"):alt {0}:altno
					 ( &(.) {altno+=1} rw("#{alt}_#{altno+1}",`trans`))*:t
					 {s="VALUE #{oldinput}=#{iget("input")};\n"}
           {t.size.times{|i| s<<"#{alt}_#{i+1}: #{iset("input",oldinput)};if (#{iget("cut")}!=Qnil) goto #{fail};\n #{t[i]} \n#{iset("cut","Qnil")};goto #{accept};\n"}}
           {"#{s}  #{alt}_#{altno+1}:  #{iset("input",oldinput)}; goto #{fail};\n #{accept}:;\n"}
					]
				| Cut[] {"#{iset("cut","Qtrue")};"}
				| Stop[] {"#{iset("stop","Qtrue")};"}

				| Many[ {label("break")}:brk {label("oldinput")}:oldinput
						rw(brk,`trans:t`)
						{"VALUE #{oldinput}; while(1){#{oldinput}=#{iget("input")}; #{t} if (#{iget("stop")}!=Qnil){{#{oldinput}=#{iget("input")};goto #{brk};} } } #{brk}: #{iset("stop","Qnil")};  #{iset("input",oldinput)}; "}
					]
				| Lookahead[ {label("accept")}:accept {label("reject")}:reject {label("oldinput")}:oldinput 
										 rw(reject,`trans:t`) 
										 {"VALUE #{oldinput}=#{iget("input")};\n #{t} x=1; goto #{accept};  #{reject}: x=0; #{accept}: #{bset("it","Qnil")}; #{iset("input",oldinput)}; if (x==#{@neg ? 1 : 0}) goto #{@@faillabel};"} ]
				| Local[ .* { bset("it",bget(@desc))+";" } ]
				| Result[ @args=>rbtrans:argss  { s="#{@name}.create(#{argss} {#{@vars.map{|l| ":#{l[0]}=>bind[:#{l.desc}]" }.sort*","} })"
					cbno=addcallback(s)
					"#{bset("it","CALL(#{cbno},1,bind)")};"
				} ]
				| Pass[ label("pass"):pass label("oldinput"):oldinput label("oldsrc"):oldsrc label("success"):success label("fail"):fail
						rw(pass,`@to=>trans:to`)
					{  "VALUE #{oldinput}=#{iget("input")};  VALUE #{oldsrc}=#{iget("src")}; int #{fail}=0;
#{iset("src",@enter ? bget(@var.desc) : "rb_ary_new3(1,#{bget(@var.desc)})")}; #{iset("input","INT2FIX(0)")};
 #{to}
	if (CALL(eof,0)==failobj) goto #{pass};
	goto #{success};
	#{pass}: #{fail}=1;
	#{success}: #{iset("src",oldsrc)}; #{iset("input",oldinput)};
	if(#{fail}) goto #{@@faillabel};
" }
					]
	
	addlambda =  {"#{@@grammar}_#{@@rulename}_#{label("lambda")}"}:lambd  rw('fail',`trans:body`)
							  { h="VALUE #{lambd}(VALUE self,VALUE bind)"
            @@header<<h+";"
						@@defmethods<<"rb_define_method(cls_#{@@grammar},\"#{lambd}\",#{lambd},1);"
            @@lambdas<< h+"{VALUE vals[0]; /*todo unify with rule and get args*/  int x;VALUE arg0,arg1,arg2,arg3;\n#{body}\nreturn #{bget("it")};\nfail: return failobj; }" }
							 {"AmethystLambda.new(:#{lambd},self,bind)" }

	failwrap(s) = {"#{s} FAILTEST(#{@@faillabel});" }

	rw(word,prc) = {@@faillabel}:rwo {@@faillabel=word } apply(prc):x {@@faillabel=rwo; x }
	
	addcallback(s) = {s}=>rbtrans:s {addcallback2(s)} 
}
