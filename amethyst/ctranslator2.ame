amethyst AmethystRBTranslator < Traverser{
}

class AmethystCTranslator < Amethyst 
	def addcallback(cb)
		@cbno||=0
		@cbno+=1
		n="callback#{@cbno}"
		@callbacks[n]=cb
		n
	end
	def bget(s)
		"rb_hash_aref(bind,ID2SYM(rb_intern(\"#{s}\")))"
	end
	def bset(s,e)
		"rb_hash_aset(bind,ID2SYM(rb_intern(\"#{s}\")),#{e})"
	end
	def iget(s)
		"rb_ivar_get(self,rb_intern(\"@#{s}\"))"
	end
	def iset(s,e)
		"rb_ivar_set(self,rb_intern(\"@#{s}\"),#{e})"
	end
	def label(s)
		@lno=(@lno||0)+1
		"#{s}#{@lno}"
	end
end

amethyst AmethystCTranslator < Amethyst {
	transfn = trans:t -> "proc{#{t}}"
	rbtrans = Local[:name  {"bind[:#{name}]"}]
					| Args[rbtrans*:a] -> a*""
		      | Strin[rbtrans*:a] -> a*""
    		  | Exp[transfn:t ] -> t
		      | Key[@name:name] -> "@src.#{name}"
      		| Global[:name] -> "@#{name}"
		      | .


	rbcode = {"class #{@@grammar} < #{@@parent}\n"}:s
	{@@callbacks.to_a}=>[([:k [rbtrans:v]] {puts v.inspect}  {"def #{k}(bind)\n#{v}\nend\n"})*:x ]
	{s+=x*""}
	{s+="\nend"; "rb_eval_string(#{s.inspect});"}
	
	trans =  Grammar[ {@@grammar=@name;@@parent=@parent} {@@faillabel="fail"} {@@callbacks={}} @rules=>[trans*]:t rbcode:rbcode
				    { s="#include \"cthyst.h\"\nVALUE cls_#{@name};\n"
							s<<t*"\n"
        		  s<<"\nvoid Init_#{@name}(){ cls_#{@name}=rb_define_class(\"#{@name}\",rb_const_get(rb_cObject,rb_intern(\"#{@@parent}\"))); 
failobj=rb_eval_string(\"FAIL\");
#{@rules.map{|r| "rb_define_method(cls_#{@name},\"#{r.name}\",#{@name}_#{r.name},#{r.args.size});"}*"\n" }
#{rbcode}
}"
							s } ]
				|  Rule[@name:name @body=>trans:body ] { "VALUE #{@@grammar}_#{name}(VALUE self) {VALUE bind=rb_hash_new();int x;VALUE arg0,arg1,arg2,arg3;\n#{body*"\n"}\nreturn #{bget("result")};\nfail: return failobj; }" }
				| Act[ .*:{addcallback(it)}:cbno {"#{bset("it","rb_funcall(self,rb_intern(\"#{cbno}\"),1,bind)")};"} ]
				| Apply[:name (.:{addcallback(it)}*):args 
            failwrap(" #{args.size.times.map{|a|"arg#{a}=rb_funcall(self,rb_intern(\"#{args[a]}\"),1,bind);"}} #{bset("it","rb_funcall(self,rb_intern(\"#{name}\"),#{args.size} #{args.size.times.map{|a|",arg#{a}"}})")};")]
				| Seq[ trans*]
				| Set[&{@append==true} @expr=>trans:e {"#{e} rb_funcall(self,rb_intern(\"_append\"),2,#{bget(@name[0])},#{bget("it")});" } ]			
				| Set[ @expr=>trans:e {@name.is_a?(Local) ? "#{e}\n #{bset(@name[0],bget("it"))}; " : "" } ]
				| Or[ {label("accept")}:accept {@@faillabel}:fail {label("oldinput")}:oldinput {[label("alt")]}:alts
					 ( &(.) {alts<<label("alt")} rw(alts[-1],`trans`))*:t
					 {s="VALUE #{oldinput}=#{iget("input")};\n"}
           {t.size.times{|i| s<<"#{alts[i]}: #{iset("input",oldinput)};if (#{iget("cut")}!=Qnil) goto #{fail};\n #{t[i]} \n#{iset("cut","Qnil")};goto #{accept};\n"}}
           {"#{s}  #{alts[-1]}: goto #{fail};\n #{accept}:;\n"}
					]
				| Many
				| Lookahead[ {label("accept")}:accept {label("reject")}:reject {label("oldinput")}:oldinput 
										 rw(reject,`trans:t`) 
										 {"VALUE #{oldinput}=#{iget("input")};\n #{t} x=1; goto #{accept};  #{reject}: x=0; #{accept}: #{iset("input",oldinput)}; if (x==#{@neg ? 1 : 0}) goto #{@@faillabel};"} ]

	failwrap(s) = {"#{s} if (#{bget("it")}==failobj) goto #{@@faillabel};" }

	rw(word,prc) = {@@faillabel}:rwo {@@faillabel=word } apply(prc):x {@@faillabel=rwo; x }
}
