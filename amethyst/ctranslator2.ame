amethyst AmethystRBTranslator < Traverser{
}

class AmethystCTranslator < Amethyst 
	def addcallback(cb)
		@cbno||=0
		@cbno+=1
		n="callback#{@cbno}"
		@callbacks[n]=cb
		n
	end
end
amethyst AmethystCTranslator < Amethyst {
	transfn = trans:t -> "proc{#{t}}"
	rbtrans = Local[:name  {"bind[:#{name}]"}]
					| Args[rbtrans*:a] -> a*""
		      | Strin[rbtrans*:a] -> a*""
    		  | Exp[transfn:t ] -> t
		      | Key[@name:name] -> "@src.#{name}"
      		| Global[:name] -> "@#{name}"
		      | .


	rbcode = {"class #{@@grammar} < #{@@parent}\n"}:s
	{@@callbacks.to_a}=>[([:k [rbtrans:v]] {puts v.inspect}  {"def #{k}(bind)\n#{v}\nend\n"})*:x ]
	{s+=x*""}
	{s+="\nend"; "rb_eval_string(#{s.inspect});"}
	
	trans =  Grammar[ {@@grammar=@name;@@parent=@parent} {@@callbacks={}} @rules=>[trans*]:t rbcode:rbcode
				    { s="#include \"cthyst.h\"\nVALUE cls_#{@name};\n"
							s<<t*"\n"
        		  s<<"\nvoid Init_#{@name}(){ cls_#{@name}=rb_define_class(\"#{@name}\",rb_const_get(rb_cObject,rb_intern(\"#{@@parent}\"))); 
#{@rules.map{|r| "rb_define_method(cls_#{@name},\"#{r.name}\",#{@name}_#{r.name},#{r.args.size});"}*"\n" }
#{rbcode}
}"
							s } ]
				|  Rule[@name:name @body=>trans:body ] { "VALUE #{@@grammar}_#{name}(VALUE self) {VALUE bind=rb_hash_new();\n#{body*"\n"}\nreturn rb_hash_aref(bind,ID2SYM(rb_intern(\"result\")));}" }
				| Act[ .*:{addcallback(it)}:cbno {"rb_hash_aset(bind,ID2SYM(rb_intern(\"it\")),rb_funcall(self,rb_intern(\"#{cbno}\"),1,bind));"} ]
				| Apply[:name {"rb_hash_aset(bind,ID2SYM(rb_intern(\"it\")),rb_funcall(self,rb_intern(\"#{name}\"),0));"}]
				| Seq[ trans*]
				| Set[ @expr=>trans:e {"#{e}\nrb_hash_aset(bind,ID2SYM(rb_intern(\"#{@name}\")),rb_hash_aref(bind,ID2SYM(rb_intern(\"it\")))); "} ]
				| .
}
