amethyst AmethystOptimizer < Amethyst {
	itrans =  (char | trans)*:r  -> r

	trans = Grammar[@name:name @parent:parent @rules=>transs:rules] @Grammar
				| Rule[@name:name @args=>args:args @body=>trans:body @bnding:bnding @locals:locals] @Rule
				| Or[transfn*:ary]  @Or
				| Seq[trans*:ary ]  @Seq
  			| Lookahead[trans:ary[] @neg:neg ]  @Lookahead
        | Comment[anything*:ary]  @Comment
				| Many[trans:ary[] @o:o] @Many
				| Apply[ :ary[] args:ary[]] @Apply
        | Set[@name=>arg:name @expr=>trans:expr @append:append] @Set
				| Act[  args:ary @pred:pred] @Act
				| Result[@name:name @args=>args:args @vars=>args:vars] @Result
				| Args[ arg*:ary ] @Args
				| Pass[ @to=>trans:to @var=>arg:var @enter:enter] @Pass
				| Cut[] @Cut
				| Stop[] @Stop
				| Local[ .* @self]

	transfn = trans 
	
	transs = [ trans*:t ] -> t

	args = Array[ arg*:a ] -> a
       | arg*
	
	arg = Args[arg*:ary]  @Args
			| Strin[(char |arg)*:ary ] @Strin
			| Exp[transfn:ary[] ] @Exp
			| Result[@name:name @args=>args:args @vars=>args:vars] @Result
			| anything
}


