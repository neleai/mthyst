amethyst AmethystOptimizer < Amethyst {
	itrans =  (char | trans)*:r  -> r

	trans = Grammar[@name:name @parent:parent @rules=>transs:rules] @Grammar
				| Rule[@name:name @args=>args:args @body=>trans:body @locals:locals] @Rule
				| Enter[trans:ary[] ]  @Enter
				| Or[transfn*:ary]  @Or
				| And[trans*:ary ]  @And
				| Not[trans:ary[] ] @Not
  			| Lookahead[trans:ary[] ]  @Lookahead
        | Comment[anything*:ary]  @Comment
				| Many[trans:ary[] @o:o] @Many
				| Apply[ :ary[] args:ary[]] @Apply
        | Set[@name=>arg:name @expr=>trans:expr @append:append] @Set
				| Act[  args:ary @pred:pred] @Act
				| Result[@name:name @args=>args:args @vars=>args:vars] @Result
				| Args[ arg*:ary ] @Args
				| Key[@name:name] @Key
				| Pass[ @to=>trans:to @var=>arg:var] @Pass

	transfn = trans 
	
	transs = [ trans*:t ] -> t

	args = Array[ arg*:a ] -> a
       | arg*
	
	arg = Args[arg*:ary]  @Args
			| Strin[(char |arg)*:ary ] @Strin
			| Exp[transfn:ary[] ] @Exp
			| anything
}

amethyst AmethystVisitor < Amethyst {
	modify = empty
	
	avisit(v) = {v}=>modify {v} | {v}

	itrans =  (char | trans)*:r  -> r

	trans = (	Grammar[@name:name @parent:parent @rules=>[ trans* ]:rules] @Grammar
						| Rule[@name:name @args=>args:args @body=>trans:body @locals:locals] @Rule
						| Enter[trans:ary[] ]  @Enter
						| Or[trans*:ary]  @Or
						| And[trans*:ary ]  @And
						| Not[trans:ary[] ] @Not
  					| Lookahead[trans:ary[] ]  @Lookahead
       			| Comment[anything*:ary]  @Comment
						| Many[trans:ary[] @o:o] @Many
						| Apply[ :ary[] args:ary[]] @Apply
        		| Set[@name=>arg:name @expr=>trans:expr @append:append] @Set
						| Act[  args:ary @pred:pred] @Act
						| Result[@name:name @args=>args:args @vars=>args:vars] @Result
						| Args[ arg*:ary ] @Args
						| Key[@name:name] @Key
						| Pass[ @to=>trans:to @var=>arg:var] @Pass 
				):v avisit(v) 

	args = Array[ arg*:a ] -> a
        | arg*

	arg   =( 	
					  Args[arg*:ary]  @Args
		 	 		| Strin[(char |arg)*:ary ] @Strin
					| Exp[trans:ary[] ] @Exp	
				 ):v avisit(v)
				| anything}
