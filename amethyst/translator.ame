amethyst AmethystTranslator < Amethyst {	
	
	itrans =  (char | trans)*:r  -> r*""
	
	trans = Grammar[@name:name @parent:parent @rules=>transs:body] -> "class #{name} < #{parent}\n#{body.sort}\nend\n"
				| Rule[ { Local.resetnumbering  } 
								rw('return',`@name:name @body=>trans:body`) { "def #{name}(#{map_index(@args){|i| "a#{i}"}*","})\nbind={}; #{@args.size.times.map{|i| "bind[:#{@args[i].desc}]=a#{i}"}*";"}\n  it=nil\n\n#{body} \nend\n"}]
				| Or[rw('next', `transfn*:ors`)]  failwrap("it=_or(#{ors*","})")
				| Seq[trans*:t ] -> "#{t*"\n"} "
				| Act[args:t @pred:pred] -> pred ?  failwrap("it=(#{t})||FAIL") : "it=(#{t})"
  			| Lookahead[ @neg:neg rw('next',`trans:t`) ]  failwrap("it=_lookahead(#{!!neg}){#{t}}")
        | Comment[:c] -> ""
				| Many[rw('break', `trans:t` ) @o=>arg:o] -> "while true\n#{o}=@input;r=#{t}\n break FAIL if r==FAIL\n (#{o}=@input;@stop=nil;break FAIL) if @stop==true\nend;@input=#{o}"
				| Apply[ Array[:klas :name] args:argss]  failwrap("it=_foreign(:#{ name } #{ argss!=[] ? ",#{argss}" : "" })")
				| Apply[ :name args:argss]  failwrap("it=#{name}(#{argss})")
				| Set[@name=>arg:name @expr=>trans:expr ] -> "#{expr}\n#{name} = it"
				| Result[@name:name @args=>args:argss @vars:vars] -> "it=#{name}.create(#{argss} {#{vars.map{|l| ":#{l[0]}=>bind[:#{l.desc}]" }.sort*","} })"
				| Local[.* {"it=bind[:#{@desc}]"}] 
				| Pass[rw('next',`@to=>trans:to @var=>arg:var`)] failwrap("it=_pass(true,#{var}){#{to}}")
				| Cut[] ->  "@cut=true;it"
				| Stop[] -> "@stop=true;it"

	transfn = trans:t -> "proc{#{t}}" 
	
	transs = [ trans*:t ] -> t
	
	args = Array[arg*:a] -> a*","
       |  arg*:a -> a*","
	
	arg = Args[arg*:a] -> a*""
			| Strin[arg*:a] -> a*""
			| Exp[transfn:t ] -> t
			| Key[@name:name] -> "@src.#{name}"
			| Local[.* {"bind[:#{@desc}]"}]
			| Global[:name] -> "@#{name}"
			| anything
				
	rw(word,prc) = {@@returnword}:rwo {@@returnword=word} apply(prc):x {@@returnword=rwo;x}

	failwrap(s) = {  "#{s};#{@@returnword} FAIL if it==FAIL" }
}
