amethyst AmethystTranslator < Amethyst {	
	
	itrans =  (char | trans)*:r  -> r*""
	
	trans = Grammar[rw('return',`@name:name @parent:parent @rules=>transs:body`)] -> "class #{name} < #{parent}\n#{body}\nend\n"
				| Rule[ { @@varhash=Hash.new{|h,k| h[k]={}}  } 
								@name:name @args=>args:argss @body=>trans:body] -> "def #{name}(#{argss})\n #{body} \nend\n"
				| Or[rw('next', `transfn*:ors`)]  failwrap("_or(#{ors*","})")
				| Seq[trans*:t ] -> "#{t*"\n"} "
				| Act[args:t @pred:pred] -> pred ?  failwrap("(#{t})||FAIL") : "(#{t})"
  			| Lookahead[ @neg:neg rw('next',`trans:t`) ]  failwrap("_lookahead(#{!!neg}){#{t}}")
        | Comment[:c] -> ""
				| Many[rw('break', `trans:t` ) @o=>arg:o] -> "while true\n#{o}=@input;r=#{t}\n break FAIL if r==FAIL\n (#{o}=@input;@stop=nil;break FAIL) if @stop==true\nend;@input=#{o}"
				| Apply[ Array[:klas :name] args:argss]  failwrap("_foreign(:#{ name } #{ argss!=[] ? ",#{argss}" : "" })")
				| Apply[ :name args:argss]  failwrap("#{name}(#{argss})")
				| Set[@name=>arg:name @expr=>trans:expr @append:append] -> append ? "it=(#{expr})\n #{name}||=[];_append(#{name},it)" : "#{name} = (#{expr})"
				| Result[@name:name @args=>args:argss @vars:vars] -> "#{name}.create(#{argss} {#{vars.map{|l| ":#{l[0]}=>#{l[0]}_#{l.number}" }*","} })"
				| Key[@name:name] -> " self['#{name}']"
				| Pass[rw('next',`@to=>trans:to @var=>arg:var @enter:enter`)] failwrap("_pass(#{!!enter},#{var}){#{to}}")
				| Cut[] ->  "@cut=true"
				| Stop[] -> "@stop=true"

	transfn = trans:t -> "proc{#{t}}" 
	
	transs = [ trans*:t ] -> t
	
	args = Array[arg*:a] -> a*","
       |  arg*:a -> a*","
	
	arg = Args[arg*:a] -> a*""
			| Strin[arg*:a] -> a*""
			| Exp[transfn:t ] -> t
		  | Key[ trans:t] -> t
			| Local[:name @number:number] -> @@varhash[name][number]=@@varhash[name].size+1 if !@@varhash[name][number]  ; "#{name}_#{@@varhash[name][number]}"
			| Global[:name] -> "@#{name}"
			| anything
				
	rw(word,prc) = {rwo=@@returnword;@@returnword=word} apply(prc):x {@@returnword=rwo;x}

	failwrap(s) = {  "(it=(#{s});#{@@returnword} FAIL if it==FAIL;it)" }
}
