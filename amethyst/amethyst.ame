amethyst Amethyst < AmethystCore {

  eof= ~.

  empty = -> nil

  char= .:c &{c.is_a? String } -> c

  endline =  '\r\n' | '\r' | '\n'
	line = (endline break | .)*:{it*""}

  space = <\s\t\r\n\f>
  spaces= space*
	_     = space

  lower=<a-z>
  upper=<A-Z>
  alpha = lower|upper
  alnum = alpha|digit
  digit=<0-9>
  xdigit = <0-9a-fA-F>
  word = alpha | '_'

	number= ('-'|{""}):m ('0x' <0-9a-fA-F_>+ | '0b' <01_>+ | '0o' <0-7_>+ | <0-9_>+)[]:n {(m+n*"").to_i}

  listOf(rule,delim) =  apply(rule):f[] (seq(delim) apply(rule))*:f[] -> f
                         | empty -> []
	replace(exp) = (apply(exp) | .):{it*""}



	fails = &{false}

	token(s) = spaces seq(s)
	seq(s) = _seq(s) {s}
	
  member(x) = .:a &{x === a} {a}
	true = member(true) false = member(false)	nil = member(nil) 

  clas(cls)     = member(cls)
	range_in(a,b) = member(a.. b)
	range_ex(a,b)	= member(a...b)

	regch(regex) = member(regex)
  
	parse(rule,obj) = {obj}[apply(rule)]
}
