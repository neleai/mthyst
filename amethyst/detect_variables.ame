amethyst Detect_Variables < AmethystOptimizer {
  trans = Rule[{@@argnames=[]}:argnames {@@locals=[]} @name:name  @args=>[addargs]:args  @body=>trans:body {@@locals.uniq}:locals {(locals-argnames).each{|l| body=And[Set[{:name=>l,:expr=>Act["nil"] }],body] };} ] @Rule
				| Or[ {@@locals}:l {[]}:r ( {@@locals=l.clone} trans:ary[] {r=(r+@@locals).uniq}   )* {@@locals=r} ] @Or
        | Result[@name:name @args=>args:args {@@locals.select{|a| a[0]!= "autovar"&&a!="_result"&&a!="it"}.uniq}:vars] @Result
				| Set[   @name:name {@@locals<<name} @expr=>trans:expr @append:append] @Set
        | super

	addargs= Args[ :name {@@argnames<<name;_Variable(name) }:result[] ]* -> result
}

amethyst Analyze_Variables < AmethystOptimizer {
  trans = Rule[@name:name @locals:locals {@@variables={} ;(locals+@argnames).each{|v| @@variables[v]=true}}  @args:args  @body=>trans:body] @Rule
        | super

	arg = char:name &{@@variables[name]}  -> _Variable(name)
			| super
}
