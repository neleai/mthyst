require 'ast'

amethyst AmethystParser < Amethyst{
	igrammar = ((~'amethyst'   . )+:{it*""} | grammar)*:a -> a

	grammar = "amethyst" name:name ("<" name:parent |empty {parent="Amethyst"} ) 
"{" rule*:rules "}"  @Grammar
	
  rule = {@@locals=[]} 
				 name:name  ruleargs:args "=" expression:body  
	   		 {_body(body)}:body {@@locals.uniq}:locals	 @Rule

	expression = choice
	
	choice = listOf('sequence',`"|"`):ary @Or
	
	sequence =  (nr prefixed)*:ary  @Seq

  prefixed   = "~" prefixed:m -> _Not(m)
             | "&" inlineHostExpr:expr  -> _Pred(expr)
             | "&" ~inlineHostExpr:expr  prefixed:m -> _Lookahead(m)
						 | modifier:from (  '=>' modifier:{from=_Pass(from,it)}      optIter(from):from (~space binding(from):from)*
												     | '[' expression:{from=Enter[from,it]} "]" optIter(from):from (~space binding(from):from)*
														 )* {from}

 		modifier = term:t optIter(t):t  (~space binding(t):t)* -> t
             | binding(Apply["anything"])
             | "#" (~endline .)*:c -> Comment[c]

   optIter(t) = "*"  -> _Many(t)
              | "+"  -> _Many1(t)
              | "?"   -> Or[t,Apply["empty"]]
              | empty -> t
  
	binding(exp) = {exp}:expr ":"  name:name ('[]' {true} | empty {false} ):append ->_Set(name,expr,append)
               | ":" inlineHostExpr:e -> Seq[ _Set("it",exp) , _Act(e) ]


	term  =  className:cls -> Apply["clas",cls]
				| "nested" '(' expression:expr ")" -> Nested[expr]
		 	  | application
 			  | key
			  | ("->" atomicHostExpr | "" inlineHostExpr):x    ->  _Act(x)
				| "\"" (~'"' eChar)*:s '"' -> Apply["token" ,quote(s)]
		 	  | "'"  (~'\''  eChar)*:s '\''  -> Apply["seq",quote(s)]
 			  | number:{Apply["exactly",it]}
      	| "<" (~">" eChar)+:x  ">"                            ->  Apply["regch","/[#{x}]/"]
        | "[" expression:to "]" -> Enter[Apply["anything"],to]
		    | "(" expression:x ")" ( '[]'	collect(x) | empty {x} )

	application =  "." -> Apply["anything"]
                 | (name:klas '::' name:rule {[klas,rule]} | name):rule argsOpt('(',')'):arg -> Apply[rule,arg]

	key         = "@" className:name  argsOpt('[',']'):args  @Result
              | "@" name:name   @Key

  collect(ors) = -> a=autovar; Seq[Or[{:ary=>ors.ary.map{|ands| Seq[{:ary=>ands.ary.map{|expr| Append[a,expr]}}]}}],_Act(a)]

	eChar = '\\' char:c   -> "\\#{c}"
  	  	| _args('#{','}')
				| char

	ruleargs = (argsOpt('(',')'))=>[addargs]

	addargs= Args[ :name {_Local(name) }:result[] ]* -> result || []

	
	nr = ~(name argsOpt('(',')') "=")
	
	argsOpt(o,c) = args(o,c) 
                | empty -> []

	args(o,c) = __args(o,c):r {
							r<< ','
							ary=[]
							tmp=[]
							r.each{|a|
								if a==','
									ary<<Args[{:ary=>tmp}];tmp=[]
								else
									tmp<<a
								end
							}
							ary
						}

	_args(o,c) = __args(o,c):r -> Args[{:ary=>([o]+r+[c])}]

	__args(o,c) = seq(o) "" rubyarg*:r seq(c) -> r
		
	rubyarg  = '`' expression:e '`' -> Exp[_body(e)]
           | _args('(',')')					 | _args('[',']')					 | _args('{','}')
					 | '"' (~'"'   eChar)*:s '"'  -> Strin[['"']+ s+['"']]
					 | '\''(~'\''  eChar)*:s '\'' -> Strin[['\'']+s+['\'']]
					 | ( <$.:>:n[] | empty) <a-zA-Z_>+:n[] -> n*""
					 | '@@' <a-zA-Z_>+:n[] -> Global[n*""]
					 | key:k -> Key[k] 
					 | <^`{}()'"\[\]>

	nameFirst      = <_$^> | letter

  nameRest       = nameFirst | digit

  className      = _* (upper nameRest* )[]:{leterize(it*"")}
	
	name = _* (nameFirst nameRest*)[]:{leterize(it*"")}

	inlineHostExpr = args('{','}')

	number = <0-9>+

	atomicHostExpr = (~endline .)*:s   {"{#{s*""}}"}=>[ inlineHostExpr ]
}
