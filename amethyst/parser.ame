#@Or_AST and @Seq_AST are necessary for collect

$agram=0
class AmethystParser < Amethyst
  memoize "name","argsOpt","rule"
  #use_implicit_variables
end
amethyst AmethystParser {
  file     = (  grammar
             | {pos}:oldpos {@@locals=[];@@appends=[];@@bnding=Bnding[]}  lambda {"amethyst Anon#{$agram+=1} { expr=#{src[(oldpos+2)..(pos-3)]}\ninit=.:@@bind }"}=>[ grammar:g ] 
                {g.rules[0].body=Seq_AST[Act[g.rules[0].locals.map{|el| [el,"=eval(\"#{el[0]}=#{el[0]}\",@bind);"] }],g.rules[0].body,Act[g.rules[0].locals.map{|el| ["$passit=",el,";eval(\"#{el[0]}=$passit\",@bind);"] }]]}
                                                 -> ["(",g,";ame_lambda(#{g.name},binding))"]
             | (~'amethyst' ~'(|'   . )
             )* eof

  grammar = 'amethyst' '_module'?:module "" name:name ("<" "" name  |{"Amethyst"}):parent
"{" (rule)*:rules "}"  @Grammar
 

  rule = {@@locals=[];@@appends=[];@@bnding=Bnding[]} {@@bnding}:bnding {false}:varargs {[]}:arg2
         "" name:name
         ("("
            ( 
                    ","? "" (     name:k -> arg2<<local(k); Or_AST[Pred[Args[Key[k,[]]]], Apply["anything"]]
                            | '*' name:k -> varargs=true  ; Or_AST[Pred[Args[Key[k,[]]]], Many[Apply["anything"]]]
                            ):what
                            ( '=' rubyarg:r   {varargs=true;what=Or_AST[what,Act[Args[r]]]} )?
                            ( ':' postfixed:e {varargs=true;what=Pass[what,e]}          )?
                            -> Bind[local(k),what]
              
            )*:arg
          ")"
          | {nil}) "=" expression:body
          {varargs ? [local("_args")] : arg2}:args
          {Bind[local("_result"),body]}:body {@@locals.uniq}:locals {body= varargs ? Seq_AST[{:ary=>([Enter[Act[["Arguments[#{name.inspect},*",local("_args"),"]"]],arg]]+@@appends.uniq.map{|a| Bind[a,Act["[]"]]}+[body])}] : Seq_AST[{:ary=>(@@appends.uniq.map{|a| Bind[a,Act["[]"]]}+[body])}]; }   @Rule
  
  expression = listOf((|sequence|),(|"|" ~')'|"else"|)):ary @Or_AST  
  
  sequence =  (nr ","? "" lookaheads)*:ary  @Seq_AST

  lookaheads = prefixed:[s] ("&&" prefixed:[s])* -> s.size>1 ? Seq_AST.create({:ary=>(s[0...-1].map{|e| Lookahead[e]}+[s[-1]])}) : s[-1]
  
  nr = ~( "" name:name
         ("("
            (
                    ","? "" (     name:k
                            | '@' name:k 
                            | '*' name:k
                            ):what
                               ( ':' postfixed:e
                               | '=' rubyarg:r    
                               | -> what
                               )

            )*
          ")"
          | {nil}) "=" )

  prefixed   =  <&~>:neg ~"{" prefixed:m    -> Lookahead[m,neg=="~"]
             | postfixed

  postfixed =  term:from 
                    (~_     (  '=>'     term:e           -> Pass_AST[from,e] 
                            | '['      expression:e "]" -> Enter_AST[from,e]
                            | <+*>:one -> Many[from,one=="+"]
                            | '?=' inline_host_expr:e -> Or_AST[from,e]
                            | '?'      -> Or_AST[from,Apply["empty"]]
                            | ':'  (  (key | name):name   ->          Bind[local(name),from]
                                   | '[' '*'?:concat (name | rubyarg*):name  ']'
                                        -> name=local(name); @@appends<< name if name.is_a?(Local); (concat=='*' ? Concat_AST : Append_AST)[name,from]
                                   |  inline_host_expr:e  -> Seq_AST[ Bind[local("it"),from] , Act[e] ]
                                   )
                    ):from  )* {from}

  
  cases = className:clas  ~'::'                      -> Apply["clas",clas]
        | ((number ('...'|'..') number)[]:{it.join} | number):num -> Apply["member",num.to_s]
        | '<' ( '>' break
              | '<' expression:[e] '>'
              | ('\\':[s])? .:[s]
              )*
          -> Or[Apply["regch","/["+s*""+"]/"],*e]

  term  = 'break' -> Seq_AST[Cut[],Stop[]]
        | cases
        | call
        | &<.:> '.'? -> Apply["anything"]
        | '[' expression:e "]" -> Enter_AST[Apply["anything"],e]
        | key:{Act[it]}
        | host_expr
        | string_like('"','"'):s -> Apply["token" ,quote(s)]
        | string_like("'","'"):s -> Apply["seq"   ,quote(s)]
        | '#'  line:s        -> Comment[s]
        | '(' expression:x ")" ( '[]'  collect(x) | {Parenthesis[x]} )

  collect(ors) = -> a=autovar; Seq_AST[Or_AST[{:ary=>ors.ary.map{|ands| Seq_AST[{:ary=>[Bind[a,Act["[]"]]]+ands.ary.map{|expr| Append_AST[a,expr]}}]}}],a]
  
  call = ( className:k '::' name:n ->[k,n]
         |                  name          ):name argsOpt:arg ( lambda:[arg])?  ->Apply[name,arg]
 
  key         = '@' className:name             -> Result[{:name=>name}]
              | '@'      name:name argsOpt:arg -> Key[name,arg]
              | '@@'     name:name             -> Global[name]
              | '@>'     name:name             -> Contextual_Argument[name]
              | '@<'     name:name             -> Contextual_Return[name]

  name           =  (<_a-zA-Z> <_a-zA-Z0-9>*)[]:{it.join}
  className      =  (    <A-Z> <_a-zA-Z0-9>*)[]:{it.join}

  ruleargs = (argsOpt)=>[ Args[ :name {local(name) }]* ]
  
  
  argsOpt = lambda:l -> [l]
          |~_  _args('(',')'):r { r+[',']}=>[procargs] 
          | {[]}

  procargs = {@@ary=[];@@tmp=[]}
             ( .:c &{c==','} {@@ary<<Args[{:ary=>@@tmp}];@@tmp=[]}
               | procargs2
             )*
             {@@ary}
  
  procargs2 =  Args[ procargs2* ]
            | .:a {@@tmp<<a}


  args(o,c) = _args(o,c):r -> Args[{:ary=>([o]+r+[c])}]

  _args(o,c) = seq(o) "" rubyarg*:r seq(c) -> r
  
  lambda   = '(|' expression:e "|)" -> Lambda[Bind[local("_result"),e]]

  
  rubyarg  = lambda
           | args('(',')')  | args('[',']') | args('{','}')
           | '"' interpolated("\""):s      -> Strin[['"']+s+['"']]
           | <a-z0-9_>:e '<<' -> [e,'<<']
           | string_like("'","'"):s  -> Strin[["'"+s+"'"]]
           | ('...' | '..')
           | ( ":@":[n] | <$.:>:[n] )? ~_ name:[n] -> n.join
           | key
           | <^'"(){}\[\]>

  
  interpolated(e) =  ( seq(e) break 
             | args('#{','}'):[x]
             | ('\\':[x])? .:[x]
             )* -> x

  
  inline_host_expr = <&~>:neg inline_host_expr:expr-> Pred[expr[0],neg=="~"]
                   | _args('{','}'):r {Act[Args[{:ary=>r}]]}
  host_expr = inline_host_expr 
            | '->' line:s   {"{"+s+"}"}=>[ inline_host_expr ]  

  string_like(start,end) = seq(start) until(end)
}

class AmethystParser < Amethyst
	def local(x)
    return Args[*x] if x.is_a?(Array)
		x.is_a?(String) ? (l=Local[x,@bnding];@locals<<l;l) : x
	end
end
