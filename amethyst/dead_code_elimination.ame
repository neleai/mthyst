amethyst Dead_Code_Detector < AmethystOptimizer {

	trans = Rule[@name:name {@@edges=Oriented_Graph.new ; @@marked=[_Variable("_result")]}  @args=>args:args @body=>trans @body:body @locals:locals {@@edges.reachable(@@marked)}:reachable] @Rule
				| Apply[:name vars_in:var ] -> @@marked +=var
				| Pass[@var=>vars_in:var ] -> @@marked += var
				| Act[ @this:this {@@marked<<this if @pred} 
							 vars_in:var ] -> var.each{|v| @@edges.add(v,this); @@edges.add(this,v); @@marked<<this if v.is_a? Local}
				| Set[@name:v   @expr=>trans @expr=>vars_in:var  ] -> var.each{|w| @@edges.add(v,w)}
				| Resul[@vars=>[vars_in]:var @this:v] -> var.each{|w| @@edges.add(v,w) }
				| super 
				
				vars_in = {ary=[]} 
								( Variable[ @this:ary[] .*]
								| Act[ @this:ary[] .*]
								| Resul[ @this:ary[] ]
								| Strin[ vars_in:ary[] ]
								| Args[ vars_in:ary[] ]
								| Set[ @name=>vars_in:ary[] ]
								| Local[:name @this:ary[] ]
								| anything
								)* -> ary
}

amethyst Dead_Code_Deleter < AmethystOptimizer{
		trans = Rule[ @name:name  @reachable:{@@reachable=it;puts @@reachable} @args=>args:args @body=>trans:body  @locals:locals ] @Rule
					| Act[@this:this .*] -> @@reachable[this] ? this : Act[]
					| Set[@name:name @expr=>trans:expr @append:append] -> @@reachable[name] ? _Set(name,expr,append) : expr
					| Resul[@this:this] ->@@reachable[this] ? this : Act[]
					| super
}

amethyst Communize_Or < AmethystOptimizer {
	trans = Or[ &(And[ trans:first  .*] ) And[ trans:fst &{first.isomorphic(fst)} trans*:rest {And[{:ary=>rest}]}:ary[]  ]* ] -> And[first ,Or[{:ary=>ary}] ]
	| super
}

amethyst Move_Assignments < AmethystOptimizer {
	trans = Set[@name:name @expr=>trans:expr @append:append {expr}=>move(append,name) ]
				| super

	move(append,name) = Or[ move(append,name)*:ary ] @Or
								| And[ (:el (&eof {el}=>move(append,name) | {el}) )*:ary ] @And
								| Enter[ move(append,name):ary[] ] @Enter
								| Pass[@var:var @to=>move(append,name):to @enter:enter] @Pass
								| anything:{_Set(name,it,append)}
}
