amethyst AmethystOptimizer2 < AmethystOptimizer {	
trans = Or[transfn*:ary ]
          {ary=ary.map{|o| (o.is_a?(Or)) ? o.ary : o}.flatten.select{|e| !(e.is_a?(Act) && e.ary.size==0)}}
          (&{ary.size==1} {ary[0]} | @Or)
        | Seq[trans*:ary ]
          {ary=ary.map{|a| (a.is_a?(Seq)) ? a.ary : a}.flatten.select{|e| !(e.is_a?(Act) && e.ary.size==0)}}
				  (&{ary.size==1} {ary[0]} | @Seq)
				| super
}




amethyst Seq_Or_Optimizer < Traverser{
  root = traverse
  
  visit = Seq[ traverse {@self.ary=@ary.map{|i| (i.is_a?(Seq)) ? i.ary : i}.flatten.select{|e| !(e.is_a?(Act) && e.ary.size==0)}} {(@ary.size==1) ? @ary[0] : @self} ]
        | Or[  traverse {@self.ary=@ary.map{|i| (i.is_a?(Or )) ? i.ary : i}.flatten.select{|e| !(e.is_a?(Act) && e.ary.size==0)}} {(@ary.size==1) ? @ary[0] : @self} ]
}
