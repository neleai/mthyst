Top=Object.new
Bottom=Object.new
class <<Top
  def inspect
    "Top"
  end
end
class <<Bottom
  def inspect
    "Bottom"
  end
end

class ConstantLattice
	attr_accessor :val
	def self.[](val)
		c=ConstantLattice.new
		c.val=val
		c.freeze
	end
	def +(a)
		return a if val==Bottom
		return self if a.val==Bottom
		return ConstantLattice[Top] if val==Top|| a.val==Top 
		if val==a.val
			return self
		else
			return ConstantLattice[Top]
		end		
	end
	def ==(a)
		return val==a.val
	end
end

amethyst Constant_Propagator{
	root= .:{@@depend=it}

	step(el) = {el}=>( Local[.*  {a=ConstantLattice[Bottom]
        											depend.reverse.edges[el].each{|e| a=a+valof(e)}
															a}]
								   | Bind[.* valof(@expr)]
  								 |  Act[ Local[.* valof(@self)]
								         | Exp[.*{ConstantLattice[@self]}]
                       ]
	  							 | CAct[ .* @self:val {ConstantLattice[val]}]
									 | . {ConstantLattice[Top]}
		  				     )
}

amethyst Constant_Traverser < Traverser_Clone2 {
	root = {@@consts=@consts}  {@cfg=nil;@reachable=nil;@consts=nil} traverse  
	visit = Bind[.* @expr=>traverse_item:expr {_Bind(@name,expr)} ]
				| Act[.* {@self}]
				| Local[ .* {@@consts[@ssaname] ? @@consts[@ssaname] : @self } ]
}
