Top=Consts.new("Top")
Bottom=Consts.new("Bottom")

class ConstantLattice
  attr_accessor :val
  def self.[](val)
    c=ConstantLattice.new
    c.val=val
    c.freeze
  end
  def +(a)
    return    a if self.val==Bottom
    return self if    a.val==Bottom
    return ConstantLattice[Top] if val!=a.val || val==Top
    return self
  end
  def ==(a)
    return val==a.val
  end
end

class Constant_Propagator < Amethyst
  attr_accessor :vals,:active,:activea,:depend
  def initialize()
    @vals={}
    @active={}
    @activea=[]
  end

  def analyze
    while e=activea.pop
      active.delete(e)
      val=step(e)
      if val!=valof(e)
        setval(e,val)
        depend.edges[e].each{|d| addactive(d)}
      end
    end
    @vals.clone.each{|k,v| @vals[k]=v.val}
  end
  def addactive(e)
    if !@active[e]
      @active[e]=true
      @activea<<e
    end
  end

  def analyze2
    @depend.topo_order.each{|e| addactive(e);@vals[e]=ConstantLattice[Bottom]}
    analyze
    r={}
    @vals.each{|k,v|
        if v!=Top&&v!=Bottom
          r[k]=v
          r[k]=Act[v] if v.is_a?(Lambda)
        end
    }
    r
  end
  def setval(e,x)
    return vals[e.ssaname]=x if e.is_a?(Local)
    return vals[e]=x
  end
  def valof(e)
    return vals[e.ssaname] if e.is_a?(Local)
    return vals[e]
  end
end


amethyst Constant_Propagator{
  root= .:{@@depend=it}

  step(el) = {el}=>( Local[.* {a=ConstantLattice[Bottom]
                               depend.reverse.edges[el].each{|e| a=a+valof(e)}
                               a}]
                   | Bind[.:expr valof(expr)]
                   |  Act[(Local[.* valof(@self)]
                         | Lambda[.*{ConstantLattice[@self]}]
                         ):x eof {x}]
                   | CAct[ .* @self:val {ConstantLattice[val]}]
                   | . {ConstantLattice[Top]}
                   )
}

amethyst Constant_Traverser < Traverser_Clone2 {
  root = {@dup}=>Rule[{@>consts=@consts;}  {@cfg=nil;@reachable=nil;@consts=nil} traverse:{it.freeze} ] 
	
	consts = ( Local[ .* &{(@>consts[@ssaname] && !(@>consts[@ssaname].is_a?(CAct)&&@>consts[@ssaname][0]==[]) &&@self[0]!="_result") } {Bind[@self,@>consts[@ssaname]]}:[ary] ] 
           | . )*
					 {ary}

  visit = Bind[traverse_item:expr {Bind[@name,expr]} ]
        | Act[ consts:a {Seq[a,@self]}  ]
        | Result[.* {@self}]
        | Local[ .* &{(@>consts[@ssaname] && @self[0]!="_result") } {@>consts[@ssaname]} ]
}
