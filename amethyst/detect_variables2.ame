amethyst Analyze_Variables2 < Traverser_Clone2 {
	itrans =   (Grammar[ @rules=>[ Rule[root]*:rules ] {@rules=rules} @self] | .)*
  root = @self=>Rule[ {@@bnding=@bnding} {@@variables=Hash.new{|k,v| k[v]=v} ;(@locals+@args).each{|w| @@variables[w[0]]=w}} {@@locals=@locals} 
traverse[.*	{@locals=nil} @self] ]

	visit = Args[ traverse[.* {@ary.map{|aa| @@variables[aa] }}=>[flat:a]  {connectstring(a.flatten)}:ary  {(ary.size==1&&(ary[0].is_a?(Local)||ary[0].is_a?(Global)||ary[0].is_a?(Key))) ? ary[0] : Args[*ary]}]]
				| Act[ traverse[.* @ary=>[( Local)] ] ]
				| Result[ {vars=@@locals.select{|aa| @vars.include? aa[0].to_sym}.uniq ;Result[{:name=>@name,:vars=>vars}]}]
				| Or[ traverse_item*:t {Or[*t]} ]
				| Seq[ traverse_item*:t {Seq[*t]} ]


	flat= (Args[flat] | Strin[flat] |	. )*
}


