# Copyright (C) Ondrej Bilka <neleai@seznam.cz> 2012

#This converts syntax tree to our immediate reprezentation. It
#
# - finds local variables
# - finds what result binds
# - removes comments
# - binds break to many and or

def connectstring(ary)
  r=[]
  s=nil
  ary.each{|a|
    if a.is_a? String
      s||=""
      s+=a
    else
      r<<s if s
      s=nil
      r<<a
    end
  }
  r<<s if s
  r
end

amethyst Analyze_Variables2 < Traverser_Clone2 {
  itrans =   (Grammar[ @rules=>[ Rule[root]*:rules ] {@rules=rules} @self] | .)*
  root = @dup=>Rule[ {@>bnding=@bnding} {@>variables=Hash.new{|k,v| k[v]=v} ;(@locals+@args).each{|w| @>variables[w[0]]=w}} {@>locals=@locals} 
traverse[.* {d=@dup;d.locals=nil;d.freeze} ] ]

  visit = Args[ traverse[(Lambda[traverse] |.)* {@ary.map{|aa| @>variables[aa] }}=>[flatten:a]  {connectstring(a.flatten)}:ary  {(ary.size==1&&(ary[0].is_a?(Local)||ary[0].is_a?(Global)||ary[0].is_a?(Key))) ? ary[0] : Args[*ary]}]]
        | Act[ @pred:pred @pure:pure traverse[.* @ary=>[(&{!pred} Local| Args[ .*:ary {Act[ary,pred,pure]}])] ] ]
        | Result[ {cls=Object.const_get(@name); vars=@>locals.select{|aa| !cls.respond_to?(:attributes) || cls.attributes.include?(aa[0].to_sym)}.uniq ;Result[{:name=>@name,:vars=>vars,:varnames=>vars.map{|v| v[0]}}]}]
        | Comment[.*{Placeholder}]
				| Seq_AST[traverse_item*:ary] -> Seq[*ary]
				| Seq[traverse_item*:ary] -> Seq[*ary]
				| Or_AST[traverse_item*:ary] ->  Or[*ary]
        | Concat_AST[ {Concat[@name,@exp]}[traverse] ]
        | Append_AST[ {Append[@name,@exp]}[traverse] ]
        | Pass_AST[   {   Pass[@from,@to]}[traverse] ]
        | Enter_AST[  {  Enter[@from,@to]}[traverse] ]

				| Parenthesis[ traverse_item ]
				| Many[ {@@stop}:oldstop {@@stop=false} traverse_item:ary2  { Many.create({:ary=>[@@stop ? ary2 : Or[ary2,Stop[]] ] }) }:ret {@@stop=oldstop}  ] -> ret
				| Stop[ {@@stop=true;@self} ]



  flatten= (Args[flatten] | Strin[flatten] |  . )*
}

amethyst Resolve_Calls < Traverser_Clone2 {
  root = .:@>grammar Rule[ {@name}:@>name traverse ]

  visit = Apply[ ["super"] {
                    super_name="#{@>name}_#{@>grammar.name}"
                    @>grammar.rules[super_name]=Compiler.grammars[@>grammar.parent].getrule(@>name).dup
                    @>grammar.rules[super_name].name=super_name
                    Apply[super_name]
              }]
        | Apply[ Array:name .*:args {Apply[name[1],*args,{:clas=>resolvegrammar(Compiler.grammars[name[0]],name[1])}]} ]
        | Apply[     .:name .*:args {Apply[name,   *args,{:clas=>resolvegrammar(@>grammar.name,name)}]} ]
}
