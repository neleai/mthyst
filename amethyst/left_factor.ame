class Left_Factor < Traverser_Clone2
	def first(s)
		return first(s[0]) if s.is_a? Seq
		return first(s.expr) if s.is_a? Bind
		s
	end
	def rest(s,bin)
		return bin unless s.is_a?(Seq)
		Seq[[bin]+s[1..(-1)]]
	end
	def binds(s,a)
		return binds(s[0],a) if s.is_a?(Seq)
		return _Bind(s.name.normalize,binds(s.expr,a)) if s.is_a? Bind
		a
	end
	def merge(ary)
		a=autovar.normalize
		puts a.inspect
		puts a.frozen?
		r=[Seq[_Bind(a,first(ary[0])),Or[*(ary.map{|e| rest(e,binds(e,a))})]]]
		r
	end
end

amethyst Left_Factor < Traverser_Clone2 {
	root=traverse

	visit=Or[ traverse[ .:x factor([],first(x),[x]) ] ]		
	
	factor(prev,start,cur) = .:next ( &{start==first(next)} factor(prev,start,cur+[next])
	  														  | ~{start==first(next)} factor(prev+merge(cur),first(next),[next]) )
											 | eof -> Or[*(prev+merge(cur))]
}
