class Left_Factor < Traverser_Clone2
	def first(s)
		return s[0] if s.is_a? Seq
#		return s.expr if s.is_a? Bind
		puts s.inspect
		s
	end
	def rest(s,bin)
		Seq[[bin]+s[1..(-1)]]
	end
	def binds(s,a)
		_Bind(s.name,binds(s.expr,a)) if s.is_a? Bind
		a
	end
	def merge(ary)
		a=autovar
		[Seq[_Bind(a,first(ary[0])),Or[*(ary.map{|e| rest(e,binds(e.ary[0],a))})]]]
	end
end

amethyst Left_Factor < Traverser_Clone2 {
	root=traverse

	visit=Or[ traverse[ .:x factor([],first(x),[x]) ] ]		
	
	factor(prev,start,cur) = .:next ( &{start==first(next)} factor(prev,start,cur+[next])
	  														  | ~{start==first(next)} factor(prev+merge(cur),first(next),[next]) )
											 | eof -> Or[*(prev+merge(cur))]
}
