class Left_Factor < Traverser_Clone2
	def first(s)
		s[0] if s.is_a? Seq
		#s.expr if s.is_a? Bind
		s
	end
	def rest(s)
		Seq[s[1..(-1)]]
	end
	def merge(ary)
		Seq[first(ary[0]),Or[*(ary.map{|e| rest(e)})]]
	end
end

amethyst Left_Factor < Traverser_Clone2 {
	root=traverse

	visit=Or[ traverse[ .:x factor([],first(x),[x]) ] ]		
	
	factor(prev,start,cur) = .:next ( &{start==first(next)} factor(prev,start,cur+next)
	  														  | ~{start==first(next)} factor(prev+merge(cur),first(next),[next]) )
											 | eof -> Or[*(prev+merge(cur))]
}
