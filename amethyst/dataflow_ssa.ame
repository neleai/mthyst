class Dataflow < Traverser
	attr_accessor :ssanums,:oldssanums,:edges
	def initialize
		@edges=Oriented_Graph.new
		@marked=[]
		@ssanums=Hash.new(0)
		@oldssanums=Hash.new(0)
	end
	def ssanum(var)
		return var unless var.is_a? Local
		var.ssano=oldssanums[var]
		[var,oldssanums[var]]
	end
	def newssanum(var)
		ssanums[var]+=1
		oldssanums[var]=ssanums[var]
		ssanum(var)
	end
	def many_end(prev)
	  ssanums.each{|var,num|
      if prev[var]!=num
        edges.add([var[0],ssanums[var]],[var[0],prev[var]] )
      end
    }
	end
	def set_end(exp)
		name=exp.name
		exp=exp.expr while exp.expr.is_a?(Set) 
	  if exp.expr.is_a?(Local) 
      o=ssanum(exp.expr)
      n=newssanum(name)
			edges.add(exp,n)
      edges.add(o,n)
    else
      edges.add(exp.expr,exp)
      n=newssanum(name)
      edges.add(exp,n)
    end
	end
	def or_end(join)
	puts self.inspect
	puts ssanums.inspect
   ssanums.clone.each{|k,v|
      u=[]
      join.each{|s| u<<s[k]}
			puts k.inspect
			puts u.inspect
      if u.uniq.size>1
        n=newssanum(k.clone)
        u.each{|v| edges.add([k,v],n)}
      end
    }
	end
end
class Local
	def ssaname
		[self,ssano]	
	end
end

amethyst CloneLocals < Traverser{
	root = @self=>Rule[ traverse ]
	visit = Local[.* {@self.clone}]
}

amethyst Dataflow < Traverser {
	root = {puts "root"} @self=>Rule[ {@@bnding=@bnding} @args=>[vars_in:var] {@@x;var.each{|v| ssanum(v)}} traverse {@reachable=@@edges.reverse.reachable(@@marked+[ssanum(@body[-1])]); @cfg=@@edges; [@@edges,@@marked+[@body[-1]]]} {@self}]
	
	visit = Apply[:name traverse @self=>[vars_in:var] {var.each{|v| @@marked<<ssanum(v)}} @self]
				| Or[	{[]}:join {oldssanums.clone}:old  ({@@oldssanums=old.clone} traverse_item {join<<oldssanums.clone})* {@@x;or_end(join)} @self ]
				| Many[  { prev=ssanums.clone} traverse {@@x;many_end(prev)} @self]
				| Pass[  traverse {@@marked<<ssanum(@var)} @self ]
				| Act[ traverse:this {@@marked<<this if @pred} 
							 @ary=>[vars_in]:var ] -> var.each{|v| edges.add(ssanum(v),this); edges.add(this,newssanum(v.clone));}; this
				| Set[   traverse  {set_end(@self) }    @self] 
				| Result[traverse:this @vars=>[vars_in]:var ] -> var.each{|w| @@edges.add(ssanum(w),this) } ; this
	
				vars_in={ary=[]}
								( Global[ @self:ary[]  {@@marked<<@self} .*]								
								| Act[ @self:ary[] .*]
                | Key[ @self:ary[]    {@@marked<<@self} .*]
								| Result[ @self:ary[] ]
								| Strin[ vars_in:ary[] ]
								| Args[ vars_in:ary[] ]
								| Set[ @name=>vars_in:ary[] ]
								| Local[:name @self:ary[] ]
								| anything
								)* -> ary
}

amethyst Dead_Code_Deleter3 < Traverser{
		root = @self=>Rule[ {@@reachable=@reachable} traverse {@reachable=nil} @self]

		visit = Act[@self:this .*] -> @@reachable[this] ? this : Act[]
					| Set[traverse @expr:expr @self:this] -> @@reachable[this] ? this : expr
					| Result[@self:this] ->@@reachable[this] ? this : Act[]
          | Local[.* @self:this ] ->puts this.ssaname.inspect; @@reachable[this.ssaname] ? this : Act[]
}


