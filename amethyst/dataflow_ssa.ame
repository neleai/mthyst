class Dataflow < Traverser
	attr_accessor :ssanums,:oldssanums,:edges
	def initialize
		@edges=Oriented_Graph.new
		@marked=[]
		@ssanums=Hash.new(0)
		@oldssanums=Hash.new(0)
	end
	def ssanum(var)
		return var unless var.is_a? Local
		var.ssano=oldssanums[var]
		[var,oldssanums[var]]
	end
	def newssanum(var)
		ssanums[var]+=1
		oldssanums[var]=ssanums[var]
		ssanum(var)
	end
	def many_end(prev)
	  ssanums.each{|var,num|
			if var.is_a?(Local)
	      if prev[var]!=num
					varp=var.clone
					varp.ssano=prev[var]
 	       edges.add([var,ssanums[var]],[varp,prev[var]] )
 	     end
			end
    }
	end
	def bind_end(exp)
		name=exp.name
		val=exp
		val=val.expr while val.is_a?(Bind) 
	  if val.is_a?(Local) 
      o=ssanum(val)
      n=newssanum(name)
			edges.add(exp,n)
      edges.add(o,n)
    else
      edges.add(val,exp)
      n=newssanum(name)
      edges.add(exp,n)
    end
	end
	def or_end(join)
   ssanums.clone.each{|k,v|
      u=[]
      join.each{|s| u<<s[k]}
      if u.uniq.size>1
        n=newssanum(k.clone)
        u.each{|v| edges.add([k,v],n)}
      end
    }
	end
end
class Local
	def ssaname
		[self,ssano]	
	end
end

amethyst Dataflow < Traverser {
	root =  @self=>Rule[ {@@bnding=@bnding} @args=>[vars_in:var] {var.each{|v| ssanum(v)}} traverse[.* {@reachable=@@edges.reverse.reachable(@@marked+[ssanum(@body[-1]),@body]); @cfg=@@edges; } {@self}] ]
	
	visit = Apply[  traverse_item*:t {Apply[*t]}:app {app}=>[vars_in:var] {var.each{|v| @@marked<<ssanum(v)}} {app} ]
				| Or[	{[]}:join {oldssanums.clone}:old  ({@@oldssanums=old.clone} traverse_item:t[] {join<<oldssanums.clone})* {or_end(join)} {Or[*t]} ]
				| Seq[traverse_item*:a {Seq[*a]} ]
				| Many[  {ssanums.clone}:prev traverse_item*:t {many_end(prev)} {Many.create({:ary=>t}).normalize} ] 
			  | Pass[ @to=>traverse_item:to @var=>traverse_item:var {@@marked<<ssanum(var)} {Pass.create({:to=>to,:var=>var}).normalize} ]
				| Act[ traverse_item:t {Act[t,@pred]}:act {@@marked<<act if @pred || !@pure} 
							 {act.ary}=>[vars_in]:var  { var.each{|v| edges.add(ssanum(v),act); edges.add(act,newssanum(v.clone));}; act}
					]
				| Bind[   traverse[.*  {bind_end(@self)} @self ] ] 
				| Result[ @vars=>[vars_in]:var { var.each{|w| @@edges.add(ssanum(w),@self) } ; @self} ]
				| (CAct | Bnding | Global | Key)[.*{@self}]
				| Lookahead[ traverse_item*:t {Lookahead[*t]} ]
				| Local[ {d=@dup;ssanum(d);d} ]

				vars_in={ary=[]}
								( Global[ @self:ary[]  {@@marked<<@self} .*]								
								| Act[ @self:ary[] .*]
								| CAct[ @self:ary[] .*]
                | Key[ @self:ary[]    {@@marked<<@self} .*]
								| Result[ @self:ary[] ]
								| Strin[ vars_in:ary[] ]
								| Args[ vars_in:ary[] ]
								| Bind[ @expr=>vars_in:ary[] ]
								| Local[:name @self:ary[] ]
								| anything
								)* -> ary
}

amethyst Dead_Code_Deleter3 < Traverser_Clone2{
		root = @self=>Rule[ {@@reachable=@reachable} {@reachable=nil;@cfg=nil} traverse]

		visit = (Act|CAct|Result)[@self:this .*] -> @@reachable[this] ? this : Act[]
					| Bind[@self:b traverse[.* @expr:expr {@@reachable[b] ? @self : (((expr.is_a?(Act)||expr.is_a?(CAct))&&expr.pure)? Act[] : expr)}]]
          | Local[.* @self:this ] -> @@reachable[this.ssaname] ? this : Act[]
}


