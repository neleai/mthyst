def locals_in(el)
  if el.is_a?(Local)
    return [el[0]]
  elsif el.is_a?(Result)
    return el.varnames
  elsif el.is_a?(Act) || el.is_a?(Args) || el.is_a?(Or)
    loc=[]
    el.ary.each{|e|
      loc+=locals_in(e) 
    }
    return loc
  elsif el.is_a? (Key) || el.is_a?(String) || el.is_a?(Global)
    return []
  else 
    return ["unknown"]
  end
end
def defer_acts(ary)
  nary=[]
  ary.reverse.each{|el|
    i=0
    if  el.is_a?(Bind) && (el.expr.is_a?(Local) || el.expr.is_a?(CAct))
      while true
        if nary[i].is_a?(Apply) && nary[i].ary.size==1
        elsif nary[i].is_a?(Act) && !nary[i].ary[0].is_a?(Args) 
          loc=locals_in(nary[i])
          if loc.include?("unknown") || loc.include?(el.name[0]) || (el.expr.is_a?(Local) && loc.include?(el.expr[0]))
            break
          end
          puts el.inspect
          puts nary[i].inspect
          puts locals_in(nary[i]).inspect
        else
          break
        end
        i+=1
      end
    end
    nary.insert(i,el)
  }
#  if ary.inspect!=nary.inspect
#    puts "before",ary.inspect
#    puts "after",nary.inspect
#  end
  nary
end

amethyst Normalize{
  must_empty = .:e &{must_empty?(e)} {e}
	cant_fail  = .:e &{cant_fail?(e) } {e}

  or = Or[ ( Or[ .* @ary:[ary] ]
           | Apply[ ["fails"] ]
           | Placeholder .* {Apply["empty"]}:[ary]  
					 | Seq[(Cut .* | cant_fail)* eof {@self}:[ary] ] .*
           | .:[ary]
           )* ]
          {ary.size}=>( 0 -> Apply["fails"]
                      | 1 -> ary[0]
                      | . -> Or.create({:ary=>ary})
                      )
        

  seq2 = Seq[ ( Seq[ .* @ary:[ary] ]
              | Apply[ ["fails"] @self:[ary] ] .*
              | Placeholder
              | .:[ary] 
              )* ]
             {ary.size}=>( 0 -> Placeholder
                         | 1 -> ary[0]
                         | . -> Seq.create({:ary=>defer_acts(ary)})
                         )
           
  bind = Bind[ {@name}:name
             ( Apply[ ["fails"] {@self} ]
             | switch[ {[]}:ary [.:p .:a {ary<<[p,Bind[name,a]]} ]* {@self.class[{:ary=>ary}]} ] 
             | Seq[.+:ary] {Seq[ary[0...-1]]}:first {ary[-1]}:last
               {last}=>( (Comment|Cut|Stop) -> Seq[Bind[name,first],last]
                       | .                  -> Seq[first,Bind[name,last]]
                       )
             | . -> @self
             ) ]       

  
  switch = Switch_Char | Switch_Clas
         | Or[.*:ary] -> Switch_Or.create(:ary=>ary.map{|k| [nil,k]})


  apply2 = Apply[ ["apply" | "_seq"],Act[Lambda[.:x]] -> x
                | ["apply"]         ,CAct[.:name] .*:args -> Apply[name,*args,{:clas=> resolvegrammar($current_grammar_name,name)}] 
                | ["_seq"]          ,CAct[ [] ]  -> Placeholder
                | .* {@self.freeze}
                ]

  act =  Act[ String[("[]"                  
                     |  number                    
                     |  <A-Z> <A-Za-z0-9_>* &{eval(@self).is_a?(Class)}
                     |  "true"|"false"|"nil"
                     | '"'  (<"> break| '\\' . | .)*
                     | '\'' (<'> break| '\\' . | .)*
                     )  
                    "" ] -> CAct[eval(@ary[0])]
            | Lambda[ .* {Act.create(@self,{:pure=>true}).freeze }]
            | Act | CAct | Local
            ]
}
