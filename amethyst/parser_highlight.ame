#@Or_AST and @Seq are necessary for collect
#
class AmethystParser_Highligth < Amethyst
	def local(x)
  	x.is_a?(String) ? (l=Local[x,@bnding];@locals<<l;l) : x
	end
end
$gno=0
def group_new
  $gno+=1
end

def map_colors(str,src,offset)
  $colors[str].each_with_index{|v,i| $colors[src][i+offset]=v}
  $group_mark[str].each_with_index{|v,i| $group_mark[src][i+offset]=v}
  $group_start[str].each{|i,a| $group_start[src][i+offset]+= a}
  $group_end[str].each{|i,a| $group_end[src][i+offset]+=a}
end

amethyst AmethystParser_Highligth {
  withcolor(color,lam) = {pos}:oldpos apply(lam):r {oldpos.upto(pos-1){|i| $colors[src][i]||=color};r}
  
  group_mark(no,lam) = {pos}:oldpos apply(lam):r {oldpos.upto(pos-1){|i| $group_mark[src][i]||=no};r}
  
  group_hl(no,lam)   = {pos}:oldpos apply(lam):r {$group_start[src][oldpos]<<no;$group_end[src][pos]<<no;r}

  file     = ( 
               {@@locals=[];@@append=[];@@bnding=2}  {group_new}:g group_hl(g)(| group_mark(g)(|withcolor("yellow")(|'(|'|)|) expression:e  "" group_mark(g)(|withcolor("yellow")(|'|)'|)|) |)-> Lambda[Bind[local("_result"),e]]

             | (~'amethyst'  ~'(|'  . )+:{it.join}
             | grammar
             )*

  grammar =  "amethyst" '_module'?  "" name:name ("<" "" name  |{"Amethyst"}):parent  
               "{" rule*:rules "}"  @Grammar
  
  rule = {@@locals=[];@@appends=[];@@bnding=Bnding[]} {@@bnding}:bnding  
         "" withcolor("red")(|name:name|) withcolor("#702020")(|ruleargs:args|) "=" expression:body  
         {Bind[local("_result"),body]}:body {@@locals.uniq}:locals {body=Seq[{:ary=>(@@appends.uniq.map{|a| Bind[a,Act["[]"]]}+[body])}]; }   @Rule

  
  expression ={group_new}:g group_hl(g)(| listOf((|sequence|),(|"" group_mark(g)(|~'|)' '|'|)|)):ary|) @Or_AST  

  
  sequence =  (nr ","? "" prefixed)*:ary  @Seq
  nr = ~("" name argsOpt "=")

  prefixed   = withcolor("yellow")(|<&~>:neg|){$colors[src][pos]="yellow"} inline_host_expr:expr {$colors[src][pos-1]="yellow"} -> Pred[expr[0],neg=="~"]
             | withcolor("yellow")(|<&~>:neg|){$colors[src][pos]="yellow"} prefixed:m            {$colors[src][pos-1]="yellow"} -> Lookahead[m,neg=="~"]
             | postfixed

  postfixed =  term:from 
                    (~_     ({group_new}:g group_hl(g)(| group_mark(g)(|withcolor("blue")(|'=>'|)|)     term:e  |)         -> Pass_AST[from,e] 
                            |{group_new}:g group_hl(g)(| withcolor("blue")(| group_mark(g)(|'['|)|)      expression:e "" withcolor("blue")(|group_mark(g)(|']'|)|)|) -> Enter_AST[from,e]
                            | withcolor("white")(|<+*>:one|) -> Many[from,one=="+"]
                            | withcolor("white")(|'?'|)      -> Or_AST[from,Apply["empty"]]
                            | withcolor("orange")(| withcolor("orange")(|':' '['|) (key | withcolor("#40a040")(|name|)):name ']'|) ->  @@appends<< local(name); Append_AST[local(name),from]
                            | withcolor("orange")(|':'|) ( withcolor("orange")(| (key | withcolor("#40a040")(|name|)):name ('[]'?):append|)  -> @@appends<< local(name) if append; append=='[]' ? Append_AST[name,from] : Bind[local(name),from]
                                  | inline_host_expr:e                      -> Seq[ Bind[local("it"),from] , Act[e] ]
                                  ) 
                    ):from  )* {from}

  
  cases = withcolor("red")(| className:clas|)  ~'::'                      -> Apply["clas",clas]
        | ((number ('...'|'..') number)[]:{it.join} | number):num -> Apply["member",num.to_s]
        | {group_new}:g group_hl(g)(| group_mark(g)(|'<'|) until((| group_mark(g)(|'>'|) |)):s |) -> Apply["regch","/["+s+"]/"]

  term  = 'nested(' expression:expr ")" -> Nested[expr]
        | 'break' -> Seq[Cut[],Stop[]]
        | cases
        | call
        | &<.:> '.'? -> Apply["anything"]
        | {group_new}:g group_hl(g)(| group_mark(g)(|withcolor("blue")(| '['|)|) expression:e "" group_mark(g)(|withcolor("blue")(|']'|)|) |)   -> Enter_AST[Apply["anything"],e]
        | key:{Act[it]}
        | host_expr
        | {group_new}:g group_hl(g)(| group_mark(g)(|'"'|)  until((|group_mark(g)(|'"'|)|)):s  |) -> Apply["token" ,quote(s)]
        | {group_new}:g group_hl(g)(| group_mark(g)(|'\''|) until((|group_mark(g)(|'\''|)|)):s |) -> Apply["seq"   ,quote(s)]
        | withcolor("gray")(|'#'  line:s|)        -> Comment[s]
        | {group_new}:g group_hl(g)(| group_mark(g)(|'('|) expression:x  "" group_mark(g)(|')'|) ( '[]'  collect(x) | {Parenthesis[x]} )   |)
 

  collect(ors) = -> a=autovar; Seq[Or_AST[{:ary=>ors.ary.map{|ands| Seq[{:ary=>[Bind[a,Act["[]"]]]+ands.ary.map{|expr| Append_AST[a,expr]}}]}}],a]
  
  call = withcolor("red")(|className:klas '::' name:name|) withcolor("#702020")(| argsOpt:arg|) lambda? -> Apply[name,arg]
       |               withcolor("red")(|name:name|)   withcolor("#702020")(|argsOpt:arg|) lambda? -> Apply[name,arg]
 
  key2        = '@' className:name             -> Result[{:name=>name}]
              | '@'      name:name argsOpt:arg -> Key[name,arg]
              | '@@'     name:name             -> Global[name]
              | '@>'     name:name             -> Contextual_Argument[name]
              | '@<'     name:name             -> Contextual_Return[name] 
  
  key=withcolor("#40a040")(|key2|)

  name           =  (<_a-zA-Z> <_a-zA-Z0-9>*)[]:{it.join}
  className      =  (    <A-Z> <_a-zA-Z0-9>*)[]:{it.join}

  ruleargs = (argsOpt)=>[ Args[ :name {local(name) }]* ]
  
  
  argsOpt = ~_  _args('(',')'):r { r+[',']}=>[procargs] 
          | {[]}

  procargs = {@@ary=[];@@tmp=[]}
             ( .:c &{c==','} {@@ary<<Args[{:ary=>@@tmp}];@@tmp=[]}
               | procargs2
             )*
             {@@ary}
  
  procargs2 =  Args[ procargs2* ]
            | .:a {@@tmp<<a}


  args(o,c) = _args(o,c):r -> Args[{:ary=>([o]+r+[c])}]

  _args(o,c) = {group_new}:g group_hl(g)(| group_mark(g)(|seq(o)|) "" rubyarg*:r group_mark(g)(|seq(c)|) |) -> r

  lambda   = {group_new}:g group_hl(g)(| group_mark(g)(|withcolor("yellow")(|'`'|)|) expression:e "" group_mark(g)(|withcolor("yellow")(|'`'|)|) |)-> Lambda[Bind[local("_result"),e]]
    
           | {group_new}:g group_hl(g)(| group_mark(g)(|withcolor("yellow")(|'(|'|)|) expression:e  "" group_mark(g)(|withcolor("yellow")(|'|)'|)|) |)-> Lambda[Bind[local("_result"),e]]
  rubyarg  = lambda
           | args('(',')')  | args('[',']') | args('{','}')
           | '"' interpolated("\""):s      -> Strin[['"']+s+['"']]
           | <a-z0-9_>:e '<<' -> [e,'<<']
           | '\'' until("'" ):s  -> Strin[["'"+s+"'"]]
           | ('...' | '..')
           | ( ":@":[n] | <$.:>:[n] )? ~_ ( withcolor("#40a040")(| name:[n] &{@@locals.include?(Local[n.join,@@bnding])} |) | name:[n] )-> n.join
           | key
           | <^`'"(){}\[\]>

  
  interpolated(e) =  ( seq(e) break 
             | args('#{','}'):[x]
             | ('\\':[x])? .:[x]
             )* -> x

  
  inline_host_expr = withcolor("brown")(|_args('{','}'):r|) {Act[Args[{:ary=>r}]]}
  host_expr = inline_host_expr 
            | {pos}:p withcolor("brown")(|'->' line:s|) {""}:r  {r="{"+s+"}"}=>[ inline_host_expr:ret ]  {map_colors(r,src,p+1) ; ret}

}

