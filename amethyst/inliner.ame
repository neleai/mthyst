amethyst Renamer < AmethystOptimizer {
	trans = Rule[{@@newvars={}} @name:name @args=>args:args @locals:locals @body=>trans:body ] @Rule	
				| super
	
	arg = Local[ :name @this:this ]  -> @@newvars[this] ? @@newvars[this] : ($av+=1; @@newvars[this]=_Local(name,$av) ;@@newvars[this] )
			| super
}
amethyst Inliner < AmethystOptimizer {

 inline(rule,grammar)= {rule}=>Rule[@name:name @args:args @locals:locals @body:body]  {@@result=autovar;@@name=name;@@args=args;@@body=Set[{:name=>@@result ,:expr=>body}] } {grammar}=>[itrans]
 
 trans = Apply[:name &{name==@@name} arg*:args] ->  body=@@body;puts args.inspect; args.each_index{|i| body=Seq[Set[{:name=>@@args[i],:expr=>Act[args[i]]}],body] } ; Seq[body,Act[@@result]]
       | {super}

	inlineit = :name :grammar  getrule(name,grammar):rule inline(rule,grammar)
	
	getrule(name,grammar) = {grammar}=>[ (Grammar[ @rules=>[ Rule[@name:n (&{ n==name} @this:rule | empty ) ]* ] ] |anything)* ]   -> Renamer.new.parse(:trans, [rule])
}
