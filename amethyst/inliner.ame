amethyst Inliner < AmethystOptimizer {

 inline(rule,grammar)= {rule}=>Rule[@name:name @args:args @locals:locals @body:body]  {@@result=autovar;@@name=name;@@args=args;@@body=shadow(Set[{:name=>@@result,:expr=>body}],locals.map{|a| Args[a]}) } {grammar}=>[itrans]
 
 trans = Apply[:name &{name==@@name} arg*:args] ->  body=@@body; args.each_index{|i| body=And[Set[{:name=>@@args[i][0],:expr=>Act[args[i]]}],body] } ; And[shadow(body,@@args),Act[@@result]]
       | {super}

	inlineit = :name :grammar  getrule(name,grammar):rule inline(rule,grammar)
	
	rename_variables =a  
	
	getrule(name,grammar) = {grammar}=>[ (Grammar[ @rules=>[ Rule[@name:n (&{ n==name} @this:rule | empty ) ]* ] ] |anything)* ]   -> rule
}
