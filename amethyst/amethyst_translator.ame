amethyst AmethystTranslator < Amethyst {	
	itrans = [ (char | trans)*:r ] -> r*""
	
	trans = Grammar[rw('return',`@name:name @parent:parent @rules=>transs:body`)] -> "class #{name} < #{parent}\n#{body}\nend\n"
				| Rule[@name:name @locals:{@@locals=it} @args=>trans:args @body=>trans:body] -> "def #{name}(#{args}) \n#{@locals.map{|l|l+"=nil"}*";"}\n #{body} \n end\n"
				| Enter[trans:expr] failwrap("_enter{#{expr}}")
				| Or[rw('next', `transfn*:ors`)]  failwrap("_or(#{ors*","})")
				| And[trans*:t ] -> "#{t*"\n"} "
				| Not[rw('next',`trans:t`) ]  failwrap("_not{#{t}}")
				| Pred[trans:t ]  failwrap("(#{t})||FAIL")
  			| Lookahead[rw('next',`trans:t`) ]  failwrap("_lookahead{#{t}}")
        | Comment[:c] -> ""
				| Many[rw('break', `trans:t` )] ->o=autovar; "while true\n#{o}=@input;r=#{t}\n break FAIL if r==FAIL\nend;@input=#{o}"
				| Apply[ :name arg*:args]  failwrap("#{name}(#{args})")
        | Set[@name:name @expr=>trans:expr] -> "#{name} = (#{expr})"
				| Append[@name:name @expr=>trans:expr] -> "it=(#{expr})\n #{name}||=[];_append(#{name},it)"
				| Act[trans:t ] -> t
				| Resul[@name:name @args=>arg:args] -> "#{name}[#{args} {#{@locals.map{|l| ":#{l}=>#{l}"}*","} }]"
				| Foreign[@klas:klas @rule=>rule @args=>arg:args] failwrap("_foreign(#{klas}).#{rule}(#{args})")
				| Args[ arg*:a ] -> a*""
				| Key[@name:name @expr=>trans:expr] -> "_key(:#{name}){#{expr}}"
				| Pass[@to=>trans:to] failwrap("_pass(it){#{to}}")
				| Shadow[@name=>name @expr=>trans:expr] -> a=autovar; r=autovar; "#{a}=#{name} ;#{r}=(#{expr});#{name}=#{a};#{r}"

	transfn = trans:t -> "proc{#{t}}" 
	
	transs = [ trans*:t ] -> t
	
	arg = Args[arg*:a] -> a
			| Exp[transfn:t ] -> t
		  | ExpKey[ trans:t] -> t
			| anything
	
	rw(word,prc) = {rwo=@@returnword;@@returnword=word} apply(prc):x {@@returnword=rwo;x}

	failwrap(s) = {  "(it=(#{s});#{@@returnword} FAIL if it==FAIL;it)" }
}
