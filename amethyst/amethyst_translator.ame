def failwrap(s)
  "(it=#{s};next FAIL if it==FAIL;it)"
end

amethyst AmethystTranslator < Amethyst {
	itrans = [ (char | trans)*:r ] -> r*""

	trans = Grammar[@name:name @parent:parent @rules=>transs:body] -> "class #{name} < #{parent}\n#{body}\nend\n"
				| Rule[@name:name @locals:{locals=it} @args=>trans:args @body=>trans:body] -> "def #{name}(#{args}) br{\n #{body} \n} end\n"
				| Enter[trans:expr] -> failwrap("_enter{#{expr}}")
				| Or[transfn*:ors] -> failwrap("_or(#{ors*","})")
				| And[trans*:t ] -> "#{t*"\n"} "
				| Not[trans:t ] -> failwrap("_not{#{t}}")
				| Pred[trans:t ] -> failwrap("_pred{#{t}}")
  			| Lookahead[trans:t ] -> failwrap("_lookahead{#{t}}")
        | Comment[:c] -> ""
				| Many[trans:t] -> "_many{#{t}}"
        | Many1[trans:t] -> "_many1{#{t}}"
				| Apply[ :name arg*:args] -> failwrap("#{name}(#{args})")
        | Set[@name:name @expr=>trans:expr] -> "#{name} = #{expr}"
				| Append[@name:name @expr=>trans:expr] -> "#{name}||=[];_append(#{name},#{expr})"
				| Act[trans:t ] -> t
				| Resul[@name:name @args=>arg:args] -> "#{name}[#{args} {#{@locals.map{|l| ":#{l}=>#{l}"}*","} }]"
				| Foreign[@klas:klas @rule=>rule @args=>arg:args] ->failwrap("_foreign(#{klas}).#{rule}(#{args})")
				| Args[ arg*:a ] -> a*""
				| Key[@name:name @expr=>trans:expr] -> "_key(:#{name}){ #{expr} }"

	transfn = trans:t -> "proc{#{t}}" 
	
	transs = [ trans*:t ] -> t
	
	arg = Args[arg*:a] -> a
			| Exp[transfn:t ] -> t
		  | ExpKey[ trans:t] -> t
			| anything
}
