class Trigrams < Amethyst
 def seq_join(l1,l2)
  a=[]
  l1.each{|e1| l2.each{|e2| a<<(e1+e2).reverse[0...3].reverse}}
  a.sort.uniq
 end
end
amethyst Trigrams {
  root = trigrams([""])

  trigrams(prev) = Seq_AST[ ({puts prev.inspect;} trigrams(prev):prev )* ] -> prev
                 | Or_AST[({puts prev.inspect;puts ary.inspect} trigrams(prev):[ary])* ] -> ary.sort.uniq
                 | Apply[ ["seq"] Act[.:s]] -> seq_join(prev,[s])
                 | Apply[ ["regch"] .* ] -> prev
                 | RegModifier[ trigrams([""]):new  .:m ] -> n= seq_join(prev,((m=="*"?[""]:[])+new+seq_join(new,new)+seq_join(new,seq_join(new,new))))
} 
