represent tree as control flow graph
transform this flow graph to SSA form
implicit variables
persistence
optimizer simplifying =>[ ] to []
split to separate parser and traverser 
split to traverser and modifier and dataflow_analyzer
make AmethystModule +include to mimic ruby module
make position handling explicit as in amethyst/position.ame
make eof in Pass explicit
refactor args
generic parent(Class) in tree traversal

variable cget,cset,rbget,rbset or some other generalization
consider pseudovariables

work in 1.9.1
unify lambda+rule in ctranslator2
bind cut,stop to corresponding many,or
code motion of acts

optimalization of lookaheads such that in anything* ~anything the ~anything is automaticaly satisfied(aka eof)
in ~space space* the  space* must be empty 
Do it by constant propagation?

detect acts as pure if they have simple form
documentation
rewrite using backtracking,repeat until...

initialize parse by Pass

directly call istead rb_funcall

switch and predication by constant propagation

treat super like renamed rule

log times of compilation

dont duplicate rules that dont refer to overwritten rule
