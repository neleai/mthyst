persistence
optimizer simplifying =>[ ] to []
make AmethystModule +include to mimic ruby module
parser to produce literal tree and convert to abstract tree
make position handling explicit as in amethyst/position.ame

generic parent(Class) in tree traversal
variable cget,cset,rbget,rbset or some other generalization
consider pseudovariables

bind cut,stop to corresponding many,or
Add id of cut stop to many/or

code motion of acts and binds

documentation

unify lambda+rule in ctranslator2
analysis what closures can be saved on stack
rewrite using backtracking,repeat until...
continuation passing style


optimalization of lookaheads such that x* ~x the ~x is automaticaly satisfied(aka eof)
in ~space space* the  space* must be empty (predication to fail)
Do it by constant propagation?

Automaticaly rewrite .* foo to _find(`foo`) and optimalizations
Special case _find(`eof`) consumes everything

adaptive dataflow
think about suitable decomposition
cont passing style.
pseudoprocedures 


serialization
incremental compilation

support for provable refactorization and migrations

functor for case insensivity
reverse functor

copy propagation, expression variables
Constant propagation also do value numbering to register renaming scheme.


replace({"a"=>"b","c"=>"d"})

extract cc from makefile for portability

UTF8

grammar not necessary

flatarray class
done but too slow to use

default arguments?

rewrite rigth recursion by futures
like reversing single linked list

assumptions

dataflows to calculate bitmasks and test by (chars|both =ones|both) where ones are bits that must be 1 and both bits than can be 0 or 1
indexing from end
integrate regch with llmatch

pass for objects that dont need ary(convention not using .?)

switch for ints,true,false,nil

resolving rules in apply

recognize block-scoped locals
recognize local=

paralelize compilation

predicated inlining
inlining concrete and general form

cache dataflow data with objects


simple dataflows
cantfail, noresult,mustempty,string_only,object_only
as constant propagation?
use to simplify ors

? warn about a:b(c)
