class Amethyst2RegReg < Amethyst
  def localnumber(name)
    @locals||=["foo"]
    @locals << name if !@locals.index(name)
    @locals.index(name) 
  end
  def rcall(name)
    Rcall.create(:name=>name,:args=>[])
  end
end
amethyst Amethyst2RegReg {
  trans = Rule[ {@@locals=[Local["_result",@bnding]]+@args;@@stops=1} @body=>trans:body @name:name ] ->puts @@locals.inspect;Rrule.create({:name=>name,:locals=>@@locals.size,:body=>body})
        | Seq[ trans:head (.+:tail ({Seq[*tail]}=>trans):tail)? ] -> tail ? Rseq.create({:head=>head,:tail=>tail}) : head
        | Or[ trans:head  (.+:tail ({ Or[*tail]}=>trans):tail)? ] -> tail ? Rswitch.create({:head=>head,:alts=>[tail,nil]}) : head
        | Lookahead[ trans:e ] -> Rswitch.create({:head=>e,:alts=>[rcall("fail"),rcall("empty")]})
        | Apply[ ["nested"] CAct[ .:start ] CAct[ .:middle ] CAct[ .:end ] ] -> Rnested.create({:body=>RSeq[rcall(start),rcall(middle),rcall(end)]})
        | Apply[ ["seq"] CAct[ .:s ] ] -> Rchar.create({:str=>s})
        | Apply[ .:name {[]}:arg {[]}:aact
                        ( .:x {autovar}:a {arg<<localnumber(a)} {Bind[a,x]}=>trans:[aact] )* 
               ] -> RSeq[*(aact+[Rcall.create(:name=>name,:args=>arg)])]
        | Many[ {@@stops||=1;@@stops*=2} trans:e {@@stops/=2} ]     -> Rmany.create({:stops=>@@stops,:body=>e})
        | Stop[ ]                                       -> Rstop.create({:stops=>@@stops/2})
        | Act[ Lambda[ trans:e ] ] -> RSeq[Rmake_lambda.create(:body=>e),Ract.create(:arg=>"wrap_lambda",:vars=>[])]
        | Act[ {@@varsin=[]}  transrb*:cb  ]         -> puts @@varsin.inspect;  Ract.create(:arg=>addcb(cb.join),:varc=>@@varsin.uniq.size,:vars=>@@varsin.uniq)
        | Bind[ @name:n trans:t ]     -> RSeq[t,Rbind.create({:vars=>[localnumber(n)]})]
        | CAct[ .:e  ] {Act["(#{e.inspect})"]}=>trans
        | Local[ {@self}:s ] {Act[['(',s,')'] ]}=>trans
        | .:x -> puts "f",x.inspect;raise "unrecognized"

  transrb = Local[ {@@varsin<<localnumber(@self); "local(#{localnumber(@self)})" } ]
          | Key[ .:name ] -> "@#{name}"
          | .
}
