<% require './types.rb' %>
<%= ["stdio","stdlib","string"].map{|e|"#include <#{e}.h>\n"}*""%>

typedef struct{ char tp;

} exp;

typedef struct t_cont {
  exp *e;
  char tp;
  struct t_cont *previous;
} t_cont;


<%=
  def make_struct(name,sc, args)
    "typedef struct #{name} { #{args.map{|t,v| "#{t} #{v};\n"}*"" } } #{name};"+
    args.map{|t,v| cnst "RESTORE_#{sc}_#{v}"}*""+
    args.map{|t,v| "#define SAVE_#{sc}_#{v} *(#{t}*)stack_match=#{sc}.#{v};stack_match+=sizeof(#{t});*stack_match=RESTORE_#{sc}_#{v};stack_match++;\n"}*""
  end
  make_struct("Args","a",$arg_tp)+
  make_struct("Global","gl",$glob_tp)+
  make_struct("Result","r",$res_tp)
%> 


<%=   $nodes.map{|n,a|
               cnst("TP_#{n}")}*"" %>

<%=cnst("FINISH","switch2","bind_restore","nested_end","closure_end")%>
<%=
   $nodes.map{|n,a|
              "typedef struct{ char tp;
                #{a.map{|k,v| "#{k} #{v};"}*"\n"}
               } exp_#{n}; exp_#{n}* normalize_#{n}(exp_#{n}*o); exp *make_#{n}(#{a.map{|k,v| "#{k} #{v}"}*","});\n"}*"" %>
char *normalize_string(char *c);
exp **normalize_array(exp **a,long size);


typedef struct{
  exp *body;
  void **closure;
} lambda_s;

#define FAIL r.state=0

static const int st_siz=sizeof(exp*)+1;
void *match2(exp *e,void *extra,char *str);
