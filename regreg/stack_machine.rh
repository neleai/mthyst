<% require './types.rb' %>
<%= ["stdio","stdlib","string"].map{|e|"#include <#{e}.h>\n"}*""%>
#include "defs.h"
typedef struct exp{ char tp;  struct exp * forget;
} exp;
typedef void * (*pfn)();


struct closure_s{
  long size;
  void **ary;
};
struct cont_s{
  exp *e;
  struct cont_s * previous;  
  exp *cont_memo;
};

typedef struct{
  long state;
  void *returned;
} memo_s;
typedef memo_s (*pfn_mem)();

typedef struct {
  long size;
  exp **ary;
} array;

void **make_closure(long l);
<%=
  def make_struct(name,sc, args)
    "typedef struct #{name} { #{args.map{|t,v| "#{t} #{v};\n"}*"" } } #{name};"
  end
  make_struct("Args","a",$arg_tp)+
  make_struct("Global","gl",$glob_tp)+
  make_struct("Result","r",$res_tp)
%> 



<%=
   $nodes.map{|n,a|
              "typedef struct{ char tp;
                exp *forget;
                #{a.map{|k,v| "#{k} #{v};"}*"\n"}
               } exp_#{n}; exp_#{n}* normalize_#{n}(exp_#{n}*o); exp *make_#{n}(#{a.map{|k,v| "#{k} #{v}"}*","});\n"}*"" %>
char *normalize_string(char *c);
array* normalize_array(array *a);


typedef struct{
  exp *body;
  struct closure_s * closure;
} lambda_s;


static const int st_siz=sizeof(exp*)+1;
void *match2(exp *e,void *extra,char *str);
